
F746_kbd_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005378  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000078  080056b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  080056b8  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001239c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002568  00000000  00000000  00032444  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  000349b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  00035838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000278de  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd6d  00000000  00000000  0005de66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f22f0  00000000  00000000  0006abd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  0015cf40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005530 	.word	0x08005530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005530 	.word	0x08005530

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <kbd_i2c_init>:
 * @param  i2c_timeout  milliseconds (32bit)
 * @retval HAL_OK, no verifications currently
 */

HAL_StatusTypeDef kbd_i2c_init(I2C_HandleTypeDef *p_hi2c1, uint8_t i2c_addr, uint32_t i2c_timeout)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	460b      	mov	r3, r1
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	72fb      	strb	r3, [r7, #11]
	phi2c1 = p_hi2c1;
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <kbd_i2c_init+0x34>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6013      	str	r3, [r2, #0]
	kbd_i2c_addr = (i2c_addr << 1);
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <kbd_i2c_init+0x38>)
 80005dc:	701a      	strb	r2, [r3, #0]
	kbd_i2c_timeout = i2c_timeout;
 80005de:	4a07      	ldr	r2, [pc, #28]	; (80005fc <kbd_i2c_init+0x3c>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000c0 	.word	0x200000c0
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000004 	.word	0x20000004

08000600 <kbd_i2c_rd_key>:
 * @brief  Read I2C Keyboardr
 * @param  pointer to key
 * @retval HAL Status
 */

HAL_StatusTypeDef kbd_i2c_rd_key(uint8_t *key){
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
	uint8_t             buf[4];
	HAL_StatusTypeDef   ret;


	*key = 0x00;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
	status_str[0] = '\0';
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
    buf[0] = RKP_REG_KEY_PRESSED ;
 8000614:	2320      	movs	r3, #32
 8000616:	723b      	strb	r3, [r7, #8]

    ret = HAL_I2C_Master_Transmit(phi2c1, kbd_i2c_addr, buf, 1, kbd_i2c_timeout);
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <kbd_i2c_rd_key+0x100>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <kbd_i2c_rd_key+0x104>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b299      	uxth	r1, r3
 8000622:	4b39      	ldr	r3, [pc, #228]	; (8000708 <kbd_i2c_rd_key+0x108>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	f001 fd69 	bl	8002104 <HAL_I2C_Master_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK ){
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <kbd_i2c_rd_key+0x48>
    	strcpy(status_str, "Keypad Tx: ");
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <kbd_i2c_rd_key+0x10c>)
 8000640:	ca07      	ldmia	r2, {r0, r1, r2}
 8000642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000646:	e021      	b.n	800068c <kbd_i2c_rd_key+0x8c>
   	}
    else
   	{
    	ret = HAL_I2C_Master_Receive(phi2c1, kbd_i2c_addr, buf, 1, kbd_i2c_timeout);
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <kbd_i2c_rd_key+0x100>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <kbd_i2c_rd_key+0x104>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b299      	uxth	r1, r3
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <kbd_i2c_rd_key+0x108>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f107 0208 	add.w	r2, r7, #8
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	f001 fe45 	bl	80022ec <HAL_I2C_Master_Receive>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
       	if (ret != HAL_OK )
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <kbd_i2c_rd_key+0x86>
       	{
       		strcpy(status_str,"Retro keypad Rx : ");
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <kbd_i2c_rd_key+0x110>)
 8000670:	4614      	mov	r4, r2
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	682b      	ldr	r3, [r5, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	8022      	strh	r2, [r4, #0]
 800067e:	3402      	adds	r4, #2
 8000680:	0c1b      	lsrs	r3, r3, #16
 8000682:	7023      	strb	r3, [r4, #0]
 8000684:	e002      	b.n	800068c <kbd_i2c_rd_key+0x8c>
       	}
       	else
       	{
            *key = buf[0];
 8000686:	7a3a      	ldrb	r2, [r7, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	701a      	strb	r2, [r3, #0]
       	}
    }
   	switch(ret){
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d82e      	bhi.n	80006f0 <kbd_i2c_rd_key+0xf0>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <kbd_i2c_rd_key+0x98>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006f1 	.word	0x080006f1
 800069c:	080006a9 	.word	0x080006a9
 80006a0:	080006c1 	.word	0x080006c1
 80006a4:	080006d9 	.word	0x080006d9
    	case HAL_OK:
    		break;
    	case HAL_ERROR:
    		strncat(status_str,"HAL_ERROR", RKP_STATUS_STR_LEN - strlen(status_str) );
 80006a8:	4814      	ldr	r0, [pc, #80]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006aa:	f7ff fdb1 	bl	8000210 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f1c3 0320 	rsb	r3, r3, #32
 80006b4:	461a      	mov	r2, r3
 80006b6:	4917      	ldr	r1, [pc, #92]	; (8000714 <kbd_i2c_rd_key+0x114>)
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006ba:	f004 fb3f 	bl	8004d3c <strncat>
    		break;
 80006be:	e017      	b.n	80006f0 <kbd_i2c_rd_key+0xf0>
    	case HAL_BUSY:
    		strncat(status_str,"HAL_BUSY", RKP_STATUS_STR_LEN - strlen(status_str) );
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006c2:	f7ff fda5 	bl	8000210 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f1c3 0320 	rsb	r3, r3, #32
 80006cc:	461a      	mov	r2, r3
 80006ce:	4912      	ldr	r1, [pc, #72]	; (8000718 <kbd_i2c_rd_key+0x118>)
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006d2:	f004 fb33 	bl	8004d3c <strncat>
    		break;
 80006d6:	e00b      	b.n	80006f0 <kbd_i2c_rd_key+0xf0>
    	case HAL_TIMEOUT:
    		strncat(status_str,"HAL_TIMEOUT", RKP_STATUS_STR_LEN - strlen(status_str) );
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006da:	f7ff fd99 	bl	8000210 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	f1c3 0320 	rsb	r3, r3, #32
 80006e4:	461a      	mov	r2, r3
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <kbd_i2c_rd_key+0x11c>)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <kbd_i2c_rd_key+0xfc>)
 80006ea:	f004 fb27 	bl	8004d3c <strncat>
    		break;
 80006ee:	bf00      	nop
  	}
  	return ret;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]

}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bdb0      	pop	{r4, r5, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000094 	.word	0x20000094
 8000700:	200000c0 	.word	0x200000c0
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004
 800070c:	08005548 	.word	0x08005548
 8000710:	08005554 	.word	0x08005554
 8000714:	08005568 	.word	0x08005568
 8000718:	08005574 	.word	0x08005574
 800071c:	08005580 	.word	0x08005580

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	; 0x58
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fcc8 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f849 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f9b7 	bl	8000aa0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000732:	f000 f8d7 	bl	80008e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000736:	f000 f955 	bl	80009e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073a:	f000 f983 	bl	8000a44 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800073e:	f000 f911 	bl	8000964 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  kbd_i2c_init( &hi2c1, RKP_I2C_ADDR, RKP_MAX_DELAY);
 8000742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000746:	2118      	movs	r1, #24
 8000748:	481a      	ldr	r0, [pc, #104]	; (80007b4 <main+0x94>)
 800074a:	f7ff ff39 	bl	80005c0 <kbd_i2c_init>

  sprintf(txt,"Keypad I2C address %x \r\n", RKP_I2C_ADDR);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2218      	movs	r2, #24
 8000754:	4918      	ldr	r1, [pc, #96]	; (80007b8 <main+0x98>)
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fad0 	bl	8004cfc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd55 	bl	8000210 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 0108 	add.w	r1, r7, #8
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <main+0x9c>)
 8000774:	f003 fb58 	bl	8003e28 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  kbd_i2c_rd_key( &pressed_key);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff40 	bl	8000600 <kbd_i2c_rd_key>
	  //kbd_i2c_rd_key(uin8_t *pressed_key)
	  if (pressed_key != 0 ){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d011      	beq.n	80007aa <main+0x8a>
		  txt[0] = pressed_key;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	723b      	strb	r3, [r7, #8]
		  txt[1] = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	727b      	strb	r3, [r7, #9]
		   HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), HAL_MAX_DELAY);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd3c 	bl	8000210 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f107 0108 	add.w	r1, r7, #8
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <main+0x9c>)
 80007a6:	f003 fb3f 	bl	8003e28 <HAL_UART_Transmit>
	   }
	   HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f000 fce1 	bl	8001174 <HAL_Delay>
  {
 80007b2:	e7e1      	b.n	8000778 <main+0x58>
 80007b4:	20000164 	.word	0x20000164
 80007b8:	080055c8 	.word	0x080055c8
 80007bc:	200000e4 	.word	0x200000e4

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0b4      	sub	sp, #208	; 0xd0
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fa8c 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2284      	movs	r2, #132	; 0x84
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fa7d 	bl	8004cec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f2:	f002 fa31 	bl	8002c58 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <SystemClock_Config+0x118>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a37      	ldr	r2, [pc, #220]	; (80008d8 <SystemClock_Config+0x118>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <SystemClock_Config+0x118>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <SystemClock_Config+0x11c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000816:	4a31      	ldr	r2, [pc, #196]	; (80008dc <SystemClock_Config+0x11c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <SystemClock_Config+0x11c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000846:	2304      	movs	r3, #4
 8000848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800084c:	2348      	movs	r3, #72	; 0x48
 800084e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000858:	2303      	movs	r3, #3
 800085a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fa08 	bl	8002c78 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800086e:	f000 f9b9 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000892:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fc91 	bl	80031c0 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008a4:	f000 f99e 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <SystemClock_Config+0x120>)
 80008aa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fe76 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80008ca:	f000 f98b 	bl	8000be4 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	37d0      	adds	r7, #208	; 0xd0
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
 80008e0:	00204100 	.word	0x00204100

080008e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ETH_Init+0x78>)
 80008ea:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <MX_ETH_Init+0x7c>)
 80008ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ETH_Init+0x78>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ETH_Init+0x78>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_ETH_Init+0x78>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_ETH_Init+0x78>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ETH_Init+0x78>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	3302      	adds	r3, #2
 8000912:	22e1      	movs	r2, #225	; 0xe1
 8000914:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ETH_Init+0x78>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	3303      	adds	r3, #3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_ETH_Init+0x78>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	3304      	adds	r3, #4
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_ETH_Init+0x78>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	3305      	adds	r3, #5
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_ETH_Init+0x78>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_ETH_Init+0x78>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_ETH_Init+0x78>)
 8000942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000946:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_ETH_Init+0x78>)
 800094a:	f000 fd1b 	bl	8001384 <HAL_ETH_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000954:	f000 f946 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200005b4 	.word	0x200005b4
 8000960:	40028000 	.word	0x40028000

08000964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_I2C1_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <MX_I2C1_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_I2C1_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009a0:	f001 fb20 	bl	8001fe4 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 f91b 	bl	8000be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009b2:	f001 ff71 	bl	8002898 <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 f912 	bl	8000be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009c4:	f001 ffb3 	bl	800292e <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 f909 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000164 	.word	0x20000164
 80009dc:	40005400 	.word	0x40005400
 80009e0:	00808cd2 	.word	0x00808cd2

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART3_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a28:	f003 f9b0 	bl	8003d8c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f8d7 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000e4 	.word	0x200000e4
 8000a40:	40004800 	.word	0x40004800

08000a44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2206      	movs	r2, #6
 8000a54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	f001 ff9d 	bl	80029c6 <HAL_PCD_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f8a7 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001b0 	.word	0x200001b0

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a45      	ldr	r2, [pc, #276]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a3f      	ldr	r2, [pc, #252]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b4c:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <MX_GPIO_Init+0x134>)
 8000b4e:	f001 fa2f 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000b58:	f001 fa2a 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_GPIO_Init+0x13c>)
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x140>)
 8000b72:	f001 f873 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b76:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x134>)
 8000b90:	f001 f864 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000bac:	f001 f856 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000bc4:	f001 f84a 	bl	8001c5c <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	40020800 	.word	0x40020800

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a4e      	ldr	r2, [pc, #312]	; (8000d94 <HAL_ETH_MspInit+0x158>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f040 8096 	bne.w	8000d8c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a40      	ldr	r2, [pc, #256]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a3a      	ldr	r2, [pc, #232]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a34      	ldr	r2, [pc, #208]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a28      	ldr	r2, [pc, #160]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d08:	2332      	movs	r3, #50	; 0x32
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d18:	230b      	movs	r3, #11
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <HAL_ETH_MspInit+0x160>)
 8000d24:	f000 ff9a 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d28:	2386      	movs	r3, #134	; 0x86
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d38:	230b      	movs	r3, #11
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <HAL_ETH_MspInit+0x164>)
 8000d44:	f000 ff8a 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_ETH_MspInit+0x168>)
 8000d66:	f000 ff79 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <HAL_ETH_MspInit+0x16c>)
 8000d88:	f000 ff68 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3738      	adds	r7, #56	; 0x38
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40028000 	.word	0x40028000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40021800 	.word	0x40021800

08000dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_I2C_MspInit+0x7c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d128      	bne.n	8000e20 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_I2C_MspInit+0x84>)
 8000e04:	f000 ff2a 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_I2C_MspInit+0x80>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x7c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d128      	bne.n	8000ea8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0x84>)
 8000ea4:	f000 feda 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d141      	bne.n	8000f62 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4817      	ldr	r0, [pc, #92]	; (8000f70 <HAL_PCD_MspInit+0xb4>)
 8000f14:	f000 fea2 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <HAL_PCD_MspInit+0xb4>)
 8000f2e:	f000 fe95 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8b4 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f003 fe4a 	bl	8004c98 <__errno>
 8001004:	4602      	mov	r2, r0
 8001006:	230c      	movs	r3, #12
 8001008:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20050000 	.word	0x20050000
 8001030:	00000400 	.word	0x00000400
 8001034:	200000b4 	.word	0x200000b4
 8001038:	20000608 	.word	0x20000608

0800103c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <SystemInit+0x28>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SystemInit+0x28>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SystemInit+0x28>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800106c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr  r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd3 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fe05 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fb41 	bl	8000720 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80010a4:	08005640 	.word	0x08005640
  ldr  r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010ac:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80010b0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80010b4:	20000604 	.word	0x20000604

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>

080010ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f92c 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f805 	bl	80010d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010ca:	f7ff fd93 	bl	8000bf4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f939 	bl	800136a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f90f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000008 	.word	0x20000008
 800112c:	20000010 	.word	0x20000010
 8001130:	2000000c 	.word	0x2000000c

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000010 	.word	0x20000010
 8001158:	200005fc 	.word	0x200005fc

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200005fc 	.word	0x200005fc

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_Delay+0x40>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000010 	.word	0x20000010

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0000 	.word	0x05fa0000

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff47 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5c 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb0 	bl	80012d8 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001394:	4ba9      	ldr	r3, [pc, #676]	; (800163c <HAL_ETH_Init+0x2b8>)
 8001396:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e183      	b.n	80016b2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fc3c 	bl	8000c3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	4b9e      	ldr	r3, [pc, #632]	; (8001640 <HAL_ETH_Init+0x2bc>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	4a9d      	ldr	r2, [pc, #628]	; (8001640 <HAL_ETH_Init+0x2bc>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ce:	6453      	str	r3, [r2, #68]	; 0x44
 80013d0:	4b9b      	ldr	r3, [pc, #620]	; (8001640 <HAL_ETH_Init+0x2bc>)
 80013d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013dc:	4b99      	ldr	r3, [pc, #612]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a98      	ldr	r2, [pc, #608]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013e8:	4b96      	ldr	r3, [pc, #600]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4994      	ldr	r1, [pc, #592]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800140e:	f7ff fea5 	bl	800115c <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001414:	e011      	b.n	800143a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001416:	f7ff fea1 	bl	800115c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001424:	d909      	bls.n	800143a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e13b      	b.n	80016b2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e4      	bne.n	8001416 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800145c:	f002 f874 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8001460:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4a78      	ldr	r2, [pc, #480]	; (8001648 <HAL_ETH_Init+0x2c4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d908      	bls.n	800147c <HAL_ETH_Init+0xf8>
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4a77      	ldr	r2, [pc, #476]	; (800164c <HAL_ETH_Init+0x2c8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d804      	bhi.n	800147c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e027      	b.n	80014cc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	4a73      	ldr	r2, [pc, #460]	; (800164c <HAL_ETH_Init+0x2c8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d908      	bls.n	8001496 <HAL_ETH_Init+0x112>
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	4a72      	ldr	r2, [pc, #456]	; (8001650 <HAL_ETH_Init+0x2cc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d804      	bhi.n	8001496 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f043 030c 	orr.w	r3, r3, #12
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	e01a      	b.n	80014cc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <HAL_ETH_Init+0x2cc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d903      	bls.n	80014a6 <HAL_ETH_Init+0x122>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4a6c      	ldr	r2, [pc, #432]	; (8001654 <HAL_ETH_Init+0x2d0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d911      	bls.n	80014ca <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <HAL_ETH_Init+0x2d0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d908      	bls.n	80014c0 <HAL_ETH_Init+0x13c>
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_ETH_Init+0x2d4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d804      	bhi.n	80014c0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e005      	b.n	80014cc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e000      	b.n	80014cc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f956 	bl	800178c <HAL_ETH_WritePHYRegister>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f9b3 	bl	8001858 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0d9      	b.n	80016b2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014fe:	20ff      	movs	r0, #255	; 0xff
 8001500:	f7ff fe38 	bl	8001174 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a7 	beq.w	800165c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800150e:	f7ff fe25 	bl	800115c <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	461a      	mov	r2, r3
 800151a:	2101      	movs	r1, #1
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f8cd 	bl	80016bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001522:	f7ff fe1b 	bl	800115c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d90f      	bls.n	8001554 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f98c 	bl	8001858 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0ae      	b.n	80016b2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0da      	beq.n	8001514 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800155e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001562:	2100      	movs	r1, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f911 	bl	800178c <HAL_ETH_WritePHYRegister>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001574:	6939      	ldr	r1, [r7, #16]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f96e 	bl	8001858 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001584:	2301      	movs	r3, #1
 8001586:	e094      	b.n	80016b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fde8 	bl	800115c <HAL_GetTick>
 800158c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	461a      	mov	r2, r3
 8001594:	2101      	movs	r1, #1
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f890 	bl	80016bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800159c:	f7ff fdde 	bl	800115c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d90f      	bls.n	80015ce <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f94f 	bl	8001858 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e071      	b.n	80016b2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0da      	beq.n	800158e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	461a      	mov	r2, r3
 80015de:	211f      	movs	r1, #31
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f86b 	bl	80016bc <HAL_ETH_ReadPHYRegister>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00b      	beq.n	8001604 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f930 	bl	8001858 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001600:	2301      	movs	r3, #1
 8001602:	e056      	b.n	80016b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e002      	b.n	800161e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	e037      	b.n	80016a0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	e032      	b.n	80016a0 <HAL_ETH_Init+0x31c>
 800163a:	bf00      	nop
 800163c:	03938700 	.word	0x03938700
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	01312cff 	.word	0x01312cff
 800164c:	02160ebf 	.word	0x02160ebf
 8001650:	039386ff 	.word	0x039386ff
 8001654:	05f5e0ff 	.word	0x05f5e0ff
 8001658:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800166c:	4313      	orrs	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f889 	bl	800178c <HAL_ETH_WritePHYRegister>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001684:	6939      	ldr	r1, [r7, #16]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8e6 	bl	8001858 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e00c      	b.n	80016b2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001698:	f640 70ff 	movw	r0, #4095	; 0xfff
 800169c:	f7ff fd6a 	bl	8001174 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8d8 	bl	8001858 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop

080016bc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	460b      	mov	r3, r1
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b82      	cmp	r3, #130	; 0x82
 80016dc:	d101      	bne.n	80016e2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
 80016e0:	e050      	b.n	8001784 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2282      	movs	r2, #130	; 0x82
 80016e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 031c 	and.w	r3, r3, #28
 80016f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8a1b      	ldrh	r3, [r3, #16]
 80016fe:	02db      	lsls	r3, r3, #11
 8001700:	b29b      	uxth	r3, r3
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001708:	897b      	ldrh	r3, [r7, #10]
 800170a:	019b      	lsls	r3, r3, #6
 800170c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f023 0302 	bic.w	r3, r3, #2
 800171c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800172e:	f7ff fd15 	bl	800115c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001734:	e015      	b.n	8001762 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001736:	f7ff fd11 	bl	800115c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d309      	bcc.n	800175a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e014      	b.n	8001784 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e4      	bne.n	8001736 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	460b      	mov	r3, r1
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b42      	cmp	r3, #66	; 0x42
 80017ac:	d101      	bne.n	80017b2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	e04e      	b.n	8001850 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2242      	movs	r2, #66	; 0x42
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 031c 	and.w	r3, r3, #28
 80017c8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8a1b      	ldrh	r3, [r3, #16]
 80017ce:	02db      	lsls	r3, r3, #11
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	019b      	lsls	r3, r3, #6
 80017dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001808:	f7ff fca8 	bl	800115c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800180e:	e015      	b.n	800183c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001810:	f7ff fca4 	bl	800115c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181e:	d309      	bcc.n	8001834 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e00d      	b.n	8001850 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e4      	bne.n	8001810 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0b0      	sub	sp, #192	; 0xc0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001874:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001886:	2300      	movs	r3, #0
 8001888:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800189e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a2:	663b      	str	r3, [r7, #96]	; 0x60
 80018a4:	e001      	b.n	80018aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80018aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018b4:	2300      	movs	r3, #0
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018c4:	2340      	movs	r3, #64	; 0x40
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800192c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001930:	4bab      	ldr	r3, [pc, #684]	; (8001be0 <ETH_MACDMAConfig+0x388>)
 8001932:	4013      	ands	r3, r2
 8001934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001938:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800193c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800193e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001940:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001944:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800194a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800194c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800194e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001952:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001958:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800195a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800195c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800195e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001960:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001964:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001968:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800196a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800196c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800196e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001972:	4313      	orrs	r3, r2
 8001974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001980:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff fbf1 	bl	8001174 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800199a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800199c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800199e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80019a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80019a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80019aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80019ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80019b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80019b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019ca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fbcc 	bl	8001174 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019ee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019f8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a08:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a16:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a1c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a22:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a28:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a2e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a34:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a48:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fb8d 	bl	8001174 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a62:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fb78 	bl	8001174 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a8c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a96:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001aea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <ETH_MACDMAConfig+0x38c>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001af6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001af8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001afa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001afc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001afe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b00:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b02:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b04:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b06:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b08:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b0a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b0e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b12:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b16:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b30:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff fb16 	bl	8001174 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b50:	4413      	add	r3, r2
 8001b52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b56:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b5c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b60:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b64:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b68:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b6e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b72:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff faef 	bl	8001174 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10d      	bne.n	8001bc8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bb4:	4413      	add	r3, r2
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6811      	ldr	r1, [r2, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <ETH_MACDMAConfig+0x390>)
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bc4:	440b      	add	r3, r1
 8001bc6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f80b 	bl	8001bec <ETH_MACAddressConfig>
}
 8001bd6:	bf00      	nop
 8001bd8:	37c0      	adds	r7, #192	; 0xc0
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	ff20810f 	.word	0xff20810f
 8001be4:	f8de3f23 	.word	0xf8de3f23
 8001be8:	00010040 	.word	0x00010040

08001bec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3305      	adds	r3, #5
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	3204      	adds	r2, #4
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <ETH_MACAddressConfig+0x68>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3303      	adds	r3, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	061a      	lsls	r2, r3, #24
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3302      	adds	r3, #2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4313      	orrs	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <ETH_MACAddressConfig+0x6c>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40028040 	.word	0x40028040
 8001c58:	40028044 	.word	0x40028044

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e175      	b.n	8001f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8164 	bne.w	8001f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d00b      	beq.n	8001cba <HAL_GPIO_Init+0x5e>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x100>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b12      	cmp	r3, #18
 8001d5a:	d123      	bne.n	8001da4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80be 	beq.w	8001f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dfe:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a57      	ldr	r2, [pc, #348]	; (8001f84 <HAL_GPIO_Init+0x328>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d037      	beq.n	8001e9a <HAL_GPIO_Init+0x23e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d031      	beq.n	8001e96 <HAL_GPIO_Init+0x23a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a55      	ldr	r2, [pc, #340]	; (8001f8c <HAL_GPIO_Init+0x330>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x236>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x232>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <HAL_GPIO_Init+0x338>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x22e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x33c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x22a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x340>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x344>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x34c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e72:	2309      	movs	r3, #9
 8001e74:	e012      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e76:	230a      	movs	r3, #10
 8001e78:	e010      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eac:	4934      	ldr	r1, [pc, #208]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae86 	bls.w	8001c7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3724      	adds	r7, #36	; 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40021400 	.word	0x40021400
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40021c00 	.word	0x40021c00
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022400 	.word	0x40022400
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fece 	bl	8000dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	e006      	b.n	800206c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800206a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d104      	bne.n	800207e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_I2C_Init+0x11c>)
 800208a:	430b      	orrs	r3, r1
 800208c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	ea42 0103 	orr.w	r1, r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	021a      	lsls	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69d9      	ldr	r1, [r3, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	02008000 	.word	0x02008000

08002104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	817b      	strh	r3, [r7, #10]
 8002114:	4613      	mov	r3, r2
 8002116:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b20      	cmp	r3, #32
 8002122:	f040 80da 	bne.w	80022da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_I2C_Master_Transmit+0x30>
 8002130:	2302      	movs	r3, #2
 8002132:	e0d3      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213c:	f7ff f80e 	bl	800115c <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2319      	movs	r3, #25
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9e6 	bl	8002520 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0be      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2221      	movs	r2, #33	; 0x21
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2210      	movs	r2, #16
 800216a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	893a      	ldrh	r2, [r7, #8]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	2bff      	cmp	r3, #255	; 0xff
 800218e:	d90e      	bls.n	80021ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	b2da      	uxtb	r2, r3
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fb48 	bl	800283c <I2C_TransferConfig>
 80021ac:	e06c      	b.n	8002288 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fb37 	bl	800283c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021ce:	e05b      	b.n	8002288 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6a39      	ldr	r1, [r7, #32]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f9e3 	bl	80025a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e07b      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x184>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d130      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f975 	bl	8002520 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04d      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d90e      	bls.n	8002268 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	22ff      	movs	r2, #255	; 0xff
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 faeb 	bl	800283c <I2C_TransferConfig>
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fada 	bl	800283c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19e      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f9c2 	bl	8002620 <I2C_WaitOnSTOPFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e01a      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80022ba:	400b      	ands	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	80002000 	.word	0x80002000
 80022e8:	fe00e800 	.word	0xfe00e800

080022ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
 80022fc:	4613      	mov	r3, r2
 80022fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	f040 80db 	bne.w	80024c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_I2C_Master_Receive+0x30>
 8002318:	2302      	movs	r3, #2
 800231a:	e0d4      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002324:	f7fe ff1a 	bl	800115c <HAL_GetTick>
 8002328:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2319      	movs	r3, #25
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f8f2 	bl	8002520 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0bf      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2222      	movs	r2, #34	; 0x22
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2210      	movs	r2, #16
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	893a      	ldrh	r2, [r7, #8]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2bff      	cmp	r3, #255	; 0xff
 8002376:	d90e      	bls.n	8002396 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	22ff      	movs	r2, #255	; 0xff
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	b2da      	uxtb	r2, r3
 8002384:	8979      	ldrh	r1, [r7, #10]
 8002386:	4b52      	ldr	r3, [pc, #328]	; (80024d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fa54 	bl	800283c <I2C_TransferConfig>
 8002394:	e06d      	b.n	8002472 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_I2C_Master_Receive+0x1e4>)
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fa43 	bl	800283c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80023b6:	e05c      	b.n	8002472 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	6a39      	ldr	r1, [r7, #32]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f96b 	bl	8002698 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e07c      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d034      	beq.n	8002472 <HAL_I2C_Master_Receive+0x186>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d130      	bne.n	8002472 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	2200      	movs	r2, #0
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f880 	bl	8002520 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e04d      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2bff      	cmp	r3, #255	; 0xff
 8002432:	d90e      	bls.n	8002452 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f9f6 	bl	800283c <I2C_TransferConfig>
 8002450:	e00f      	b.n	8002472 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	2300      	movs	r3, #0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f9e5 	bl	800283c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d19d      	bne.n	80023b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f8cd 	bl	8002620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e01a      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_I2C_Master_Receive+0x1e8>)
 80024a4:	400b      	ands	r3, r1
 80024a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	80002400 	.word	0x80002400
 80024d4:	fe00e800 	.word	0xfe00e800

080024d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d103      	bne.n	80024f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	619a      	str	r2, [r3, #24]
  }
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002530:	e022      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d01e      	beq.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7fe fe0f 	bl	800115c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e00f      	b.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d0cd      	beq.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ac:	e02c      	b.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f8dc 	bl	8002770 <I2C_IsAcknowledgeFailed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02a      	b.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d01e      	beq.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7fe fdc7 	bl	800115c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d1cb      	bne.n	80025ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262c:	e028      	b.n	8002680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f89c 	bl	8002770 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e026      	b.n	8002690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7fe fd8b 	bl	800115c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d113      	bne.n	8002680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b20      	cmp	r3, #32
 800268c:	d1cf      	bne.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026a4:	e055      	b.n	8002752 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f860 	bl	8002770 <I2C_IsAcknowledgeFailed>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e053      	b.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d129      	bne.n	800271c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d105      	bne.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e03f      	b.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2220      	movs	r2, #32
 80026e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80026f6:	400b      	ands	r3, r1
 80026f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e022      	b.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271c:	f7fe fd1e 	bl	800115c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d1a2      	bne.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d151      	bne.n	800282e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278a:	e022      	b.n	80027d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d01e      	beq.n	80027d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe fce2 	bl	800115c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_IsAcknowledgeFailed+0x3a>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d113      	bne.n	80027d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e02e      	b.n	8002830 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d1d5      	bne.n	800278c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2210      	movs	r2, #16
 80027e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2220      	movs	r2, #32
 80027ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fe71 	bl	80024d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <I2C_IsAcknowledgeFailed+0xc8>)
 8002802:	400b      	ands	r3, r1
 8002804:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f043 0204 	orr.w	r2, r3, #4
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	fe00e800 	.word	0xfe00e800

0800283c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	4613      	mov	r3, r2
 800284c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	0d5b      	lsrs	r3, r3, #21
 8002858:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <I2C_TransferConfig+0x58>)
 800285e:	430b      	orrs	r3, r1
 8002860:	43db      	mvns	r3, r3
 8002862:	ea02 0103 	and.w	r1, r2, r3
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800286c:	7a7b      	ldrb	r3, [r7, #9]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	431a      	orrs	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	03ff63ff 	.word	0x03ff63ff

08002898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d138      	bne.n	8002920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e032      	b.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b20      	cmp	r3, #32
 8002942:	d139      	bne.n	80029b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800294e:	2302      	movs	r3, #2
 8002950:	e033      	b.n	80029ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2224      	movs	r2, #36	; 0x24
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c8:	b08f      	sub	sp, #60	; 0x3c
 80029ca:	af0a      	add	r7, sp, #40	; 0x28
 80029cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e116      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fa62 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fee6 	bl	80047e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	687e      	ldr	r6, [r7, #4]
 8002a24:	466d      	mov	r5, sp
 8002a26:	f106 0410 	add.w	r4, r6, #16
 8002a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3a:	1d33      	adds	r3, r6, #4
 8002a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f001 fe7a 	bl	8004738 <USB_CoreInit>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0d7      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fed4 	bl	800480a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e04a      	b.n	8002afe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333d      	adds	r3, #61	; 0x3d
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	333c      	adds	r3, #60	; 0x3c
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	b298      	uxth	r0, r3
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3342      	adds	r3, #66	; 0x42
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333f      	adds	r3, #63	; 0x3f
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3344      	adds	r3, #68	; 0x44
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3348      	adds	r3, #72	; 0x48
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3350      	adds	r3, #80	; 0x50
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	3301      	adds	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3af      	bcc.n	8002a68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e044      	b.n	8002b98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3301      	adds	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3b5      	bcc.n	8002b0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	687e      	ldr	r6, [r7, #4]
 8002baa:	466d      	mov	r5, sp
 8002bac:	f106 0410 	add.w	r4, r6, #16
 8002bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc0:	1d33      	adds	r3, r6, #4
 8002bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f001 fe4b 	bl	8004860 <USB_DevInit>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e014      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f80b 	bl	8002c10 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 fffd 	bl	8004bfe <USB_DevDisconnect>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	10000003 	.word	0x10000003

08002c58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40007000 	.word	0x40007000

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e291      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca8:	4b93      	ldr	r3, [pc, #588]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
 8002cb4:	4b90      	ldr	r3, [pc, #576]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x130>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e26b      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x7a>
 8002ce4:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a83      	ldr	r2, [pc, #524]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x9c>
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7b      	ldr	r2, [pc, #492]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fa00 	bl	800115c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe f9fc 	bl	800115c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e21f      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f9ec 	bl	800115c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe f9e8 	bl	800115c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e20b      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x110>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d069      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1df      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	493d      	ldr	r1, [pc, #244]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f99e 	bl	800115c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe f99a 	bl	800115c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1bd      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
 8002e56:	e018      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe f97a 	bl	800115c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe f976 	bl	800115c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e199      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d038      	beq.n	8002f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe f957 	bl	800115c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe f953 	bl	800115c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e176      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe f93d 	bl	800115c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f939 	bl	800115c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d903      	bls.n	8002efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e15c      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
 8002ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b91      	ldr	r3, [pc, #580]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a4 	beq.w	800305e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a87      	ldr	r2, [pc, #540]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4b82      	ldr	r3, [pc, #520]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe f901 	bl	800115c <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe f8fd 	bl	800115c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e120      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x31a>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x33c>
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a69      	ldr	r2, [pc, #420]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a66      	ldr	r2, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a60      	ldr	r2, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f8b1 	bl	800115c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe f8ad 	bl	800115c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0ce      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x386>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe f89b 	bl	800115c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe f897 	bl	800115c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b40      	ldr	r3, [pc, #256]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80a4 	beq.w	80031b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d06b      	beq.n	800314c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d149      	bne.n	8003110 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe f868 	bl	800115c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe f864 	bl	800115c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4313      	orrs	r3, r2
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe f838 	bl	800115c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe f834 	bl	800115c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e057      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x478>
 800310e:	e04f      	b.n	80031b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f81e 	bl	800115c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe f81a 	bl	800115c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03d      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x4ac>
 8003142:	e035      	b.n	80031b0 <HAL_RCC_OscConfig+0x538>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x544>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d0      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 020f 	bic.w	r2, r3, #15
 80031ee:	4965      	ldr	r1, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d040      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e073      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4936      	ldr	r1, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fd ff52 	bl	800115c <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fd ff4e 	bl	800115c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e053      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d210      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4601      	mov	r1, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	fa21 f303 	lsr.w	r3, r1, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1d0>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd feae 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	080055e4 	.word	0x080055e4
 8003390:	20000008 	.word	0x20000008
 8003394:	2000000c 	.word	0x2000000c

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d007      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x32>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d008      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x38>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80b4 	bne.w	800352c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033c6:	60bb      	str	r3, [r7, #8]
      break;
 80033c8:	e0b3      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033cc:	60bb      	str	r3, [r7, #8]
      break;
 80033ce:	e0b0      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d0:	4b5a      	ldr	r3, [pc, #360]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04a      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b55      	ldr	r3, [pc, #340]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	ea03 0501 	and.w	r5, r3, r1
 80033fc:	ea04 0602 	and.w	r6, r4, r2
 8003400:	4629      	mov	r1, r5
 8003402:	4632      	mov	r2, r6
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f04f 0400 	mov.w	r4, #0
 800340c:	0154      	lsls	r4, r2, #5
 800340e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003412:	014b      	lsls	r3, r1, #5
 8003414:	4619      	mov	r1, r3
 8003416:	4622      	mov	r2, r4
 8003418:	1b49      	subs	r1, r1, r5
 800341a:	eb62 0206 	sbc.w	r2, r2, r6
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0194      	lsls	r4, r2, #6
 8003428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342c:	018b      	lsls	r3, r1, #6
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	eb64 0402 	sbc.w	r4, r4, r2
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	00e2      	lsls	r2, r4, #3
 800343e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003442:	00d9      	lsls	r1, r3, #3
 8003444:	460b      	mov	r3, r1
 8003446:	4614      	mov	r4, r2
 8003448:	195b      	adds	r3, r3, r5
 800344a:	eb44 0406 	adc.w	r4, r4, r6
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	0262      	lsls	r2, r4, #9
 8003458:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800345c:	0259      	lsls	r1, r3, #9
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4618      	mov	r0, r3
 8003464:	4621      	mov	r1, r4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	f7fc ff26 	bl	80002c0 <__aeabi_uldivmod>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e049      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b2f      	ldr	r3, [pc, #188]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	f04f 0400 	mov.w	r4, #0
 8003486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	ea03 0501 	and.w	r5, r3, r1
 8003492:	ea04 0602 	and.w	r6, r4, r2
 8003496:	4629      	mov	r1, r5
 8003498:	4632      	mov	r2, r6
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	0154      	lsls	r4, r2, #5
 80034a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a8:	014b      	lsls	r3, r1, #5
 80034aa:	4619      	mov	r1, r3
 80034ac:	4622      	mov	r2, r4
 80034ae:	1b49      	subs	r1, r1, r5
 80034b0:	eb62 0206 	sbc.w	r2, r2, r6
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	0194      	lsls	r4, r2, #6
 80034be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	1a5b      	subs	r3, r3, r1
 80034c6:	eb64 0402 	sbc.w	r4, r4, r2
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	00e2      	lsls	r2, r4, #3
 80034d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034d8:	00d9      	lsls	r1, r3, #3
 80034da:	460b      	mov	r3, r1
 80034dc:	4614      	mov	r4, r2
 80034de:	195b      	adds	r3, r3, r5
 80034e0:	eb44 0406 	adc.w	r4, r4, r6
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	02a2      	lsls	r2, r4, #10
 80034ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034f2:	0299      	lsls	r1, r3, #10
 80034f4:	460b      	mov	r3, r1
 80034f6:	4614      	mov	r4, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	4621      	mov	r1, r4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f04f 0400 	mov.w	r4, #0
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fc fedb 	bl	80002c0 <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	60bb      	str	r3, [r7, #8]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800352e:	60bb      	str	r3, [r7, #8]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	68bb      	ldr	r3, [r7, #8]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000008 	.word	0x20000008

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4601      	mov	r1, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4a03      	ldr	r2, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	080055f4 	.word	0x080055f4

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4601      	mov	r1, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4a03      	ldr	r2, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	080055f4 	.word	0x080055f4

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035d8:	4b69      	ldr	r3, [pc, #420]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a68      	ldr	r2, [pc, #416]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	4964      	ldr	r1, [pc, #400]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d017      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	4959      	ldr	r1, [pc, #356]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d101      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d017      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003646:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	494a      	ldr	r1, [pc, #296]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003664:	d101      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808b 	beq.w	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a39      	ldr	r2, [pc, #228]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fd50 	bl	800115c <HAL_GetTick>
 80036bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fd fd4c 	bl	800115c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e355      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036d2:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d035      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d02e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d114      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd fd14 	bl	800115c <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fd fd10 	bl	800115c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e317      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ee      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003766:	d111      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003776:	400b      	ands	r3, r1
 8003778:	4901      	ldr	r1, [pc, #4]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
 800377e:	e00b      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	0ffffcff 	.word	0x0ffffcff
 800378c:	4bb0      	ldr	r3, [pc, #704]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4aaf      	ldr	r2, [pc, #700]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	4bad      	ldr	r3, [pc, #692]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800379a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	49aa      	ldr	r1, [pc, #680]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b6:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037bc:	4aa4      	ldr	r2, [pc, #656]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037c6:	4ba2      	ldr	r3, [pc, #648]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	499f      	ldr	r1, [pc, #636]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e4:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f2:	4997      	ldr	r1, [pc, #604]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003814:	498e      	ldr	r1, [pc, #568]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003828:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	4986      	ldr	r1, [pc, #536]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800384a:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	497d      	ldr	r1, [pc, #500]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4975      	ldr	r1, [pc, #468]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388e:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f023 020c 	bic.w	r2, r3, #12
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	496c      	ldr	r1, [pc, #432]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b0:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4964      	ldr	r1, [pc, #400]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	495b      	ldr	r1, [pc, #364]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f4:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	4953      	ldr	r1, [pc, #332]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	494a      	ldr	r1, [pc, #296]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003938:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	4942      	ldr	r1, [pc, #264]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	4939      	ldr	r1, [pc, #228]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398a:	4931      	ldr	r1, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	4928      	ldr	r1, [pc, #160]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	4918      	ldr	r1, [pc, #96]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a10:	490f      	ldr	r1, [pc, #60]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a26:	f040 80d8 	bne.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a36:	f7fd fb91 	bl	800115c <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a3e:	f7fd fb8d 	bl	800115c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	; 0x64
 8003a4a:	d903      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e196      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003a50:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d021      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a74:	4b64      	ldr	r3, [pc, #400]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	019a      	lsls	r2, r3, #6
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	071b      	lsls	r3, r3, #28
 8003aa8:	4957      	ldr	r1, [pc, #348]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ada:	d129      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	019a      	lsls	r2, r3, #6
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	071b      	lsls	r3, r3, #28
 8003b10:	493d      	ldr	r1, [pc, #244]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f023 021f 	bic.w	r2, r3, #31
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4937      	ldr	r1, [pc, #220]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	0e1b      	lsrs	r3, r3, #24
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	0f1b      	lsrs	r3, r3, #28
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	019a      	lsls	r2, r3, #6
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	431a      	orrs	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	071b      	lsls	r3, r3, #28
 8003b70:	4925      	ldr	r1, [pc, #148]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d011      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	019a      	lsls	r2, r3, #6
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	071b      	lsls	r3, r3, #28
 8003ba0:	4919      	ldr	r1, [pc, #100]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fad2 	bl	800115c <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bbc:	f7fd face 	bl	800115c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0d7      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 80cd 	bne.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd fab5 	bl	800115c <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf6:	f7fd fab1 	bl	800115c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	; 0x64
 8003c02:	d903      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0ba      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c0c:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c18:	d0ed      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02e      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d12a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c42:	4b51      	ldr	r3, [pc, #324]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	0f1b      	lsrs	r3, r3, #28
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	019a      	lsls	r2, r3, #6
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	071b      	lsls	r3, r3, #28
 8003c76:	4944      	ldr	r1, [pc, #272]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c7e:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	493d      	ldr	r1, [pc, #244]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cac:	d11d      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	0e1b      	lsrs	r3, r3, #24
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	0f1b      	lsrs	r3, r3, #28
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	4929      	ldr	r1, [pc, #164]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d04:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	019a      	lsls	r2, r3, #6
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	4917      	ldr	r1, [pc, #92]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	4911      	ldr	r1, [pc, #68]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd fa02 	bl	800115c <HAL_GetTick>
 8003d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d5c:	f7fd f9fe 	bl	800115c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e007      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7a:	d1ef      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e040      	b.n	8003e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd f840 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8be 	bl	8003f4c <UART_SetConfig>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e022      	b.n	8003e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fb5c 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fbe3 	bl	80045e4 <UART_CheckIdleState>
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d17f      	bne.n	8003f40 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Transmit+0x24>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e078      	b.n	8003f42 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Transmit+0x36>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e071      	b.n	8003f42 <HAL_UART_Transmit+0x11a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd f973 	bl	800115c <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d108      	bne.n	8003ea4 <HAL_UART_Transmit+0x7c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e003      	b.n	8003eac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003eb4:	e02c      	b.n	8003f10 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fbbe 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e038      	b.n	8003f42 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e007      	b.n	8003efe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1cc      	bne.n	8003eb6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fb8b 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e005      	b.n	8003f42 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4bb1      	ldr	r3, [pc, #708]	; (8004240 <UART_SetConfig+0x2f4>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	6939      	ldr	r1, [r7, #16]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a9f      	ldr	r2, [pc, #636]	; (8004244 <UART_SetConfig+0x2f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d121      	bne.n	8004010 <UART_SetConfig+0xc4>
 8003fcc:	4b9e      	ldr	r3, [pc, #632]	; (8004248 <UART_SetConfig+0x2fc>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d816      	bhi.n	8004008 <UART_SetConfig+0xbc>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x94>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ffd 	.word	0x08003ffd
 8003fe8:	08003ff7 	.word	0x08003ff7
 8003fec:	08004003 	.word	0x08004003
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e151      	b.n	800429a <UART_SetConfig+0x34e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e14e      	b.n	800429a <UART_SetConfig+0x34e>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e14b      	b.n	800429a <UART_SetConfig+0x34e>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e148      	b.n	800429a <UART_SetConfig+0x34e>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	bf00      	nop
 800400e:	e144      	b.n	800429a <UART_SetConfig+0x34e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a8d      	ldr	r2, [pc, #564]	; (800424c <UART_SetConfig+0x300>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d134      	bne.n	8004084 <UART_SetConfig+0x138>
 800401a:	4b8b      	ldr	r3, [pc, #556]	; (8004248 <UART_SetConfig+0x2fc>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d829      	bhi.n	800407c <UART_SetConfig+0x130>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0xe4>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004065 	.word	0x08004065
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800407d 	.word	0x0800407d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	08004071 	.word	0x08004071
 8004044:	0800407d 	.word	0x0800407d
 8004048:	0800407d 	.word	0x0800407d
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800406b 	.word	0x0800406b
 8004054:	0800407d 	.word	0x0800407d
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800407d 	.word	0x0800407d
 8004060:	08004077 	.word	0x08004077
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e117      	b.n	800429a <UART_SetConfig+0x34e>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e114      	b.n	800429a <UART_SetConfig+0x34e>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e111      	b.n	800429a <UART_SetConfig+0x34e>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e10e      	b.n	800429a <UART_SetConfig+0x34e>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	bf00      	nop
 8004082:	e10a      	b.n	800429a <UART_SetConfig+0x34e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a71      	ldr	r2, [pc, #452]	; (8004250 <UART_SetConfig+0x304>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d120      	bne.n	80040d0 <UART_SetConfig+0x184>
 800408e:	4b6e      	ldr	r3, [pc, #440]	; (8004248 <UART_SetConfig+0x2fc>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004098:	2b10      	cmp	r3, #16
 800409a:	d00f      	beq.n	80040bc <UART_SetConfig+0x170>
 800409c:	2b10      	cmp	r3, #16
 800409e:	d802      	bhi.n	80040a6 <UART_SetConfig+0x15a>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <UART_SetConfig+0x164>
 80040a4:	e010      	b.n	80040c8 <UART_SetConfig+0x17c>
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d005      	beq.n	80040b6 <UART_SetConfig+0x16a>
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	d009      	beq.n	80040c2 <UART_SetConfig+0x176>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x17c>
 80040b0:	2300      	movs	r3, #0
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e0f1      	b.n	800429a <UART_SetConfig+0x34e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e0ee      	b.n	800429a <UART_SetConfig+0x34e>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e0eb      	b.n	800429a <UART_SetConfig+0x34e>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e0e8      	b.n	800429a <UART_SetConfig+0x34e>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	bf00      	nop
 80040ce:	e0e4      	b.n	800429a <UART_SetConfig+0x34e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5f      	ldr	r2, [pc, #380]	; (8004254 <UART_SetConfig+0x308>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d120      	bne.n	800411c <UART_SetConfig+0x1d0>
 80040da:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <UART_SetConfig+0x2fc>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d00f      	beq.n	8004108 <UART_SetConfig+0x1bc>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d802      	bhi.n	80040f2 <UART_SetConfig+0x1a6>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <UART_SetConfig+0x1b0>
 80040f0:	e010      	b.n	8004114 <UART_SetConfig+0x1c8>
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d005      	beq.n	8004102 <UART_SetConfig+0x1b6>
 80040f6:	2bc0      	cmp	r3, #192	; 0xc0
 80040f8:	d009      	beq.n	800410e <UART_SetConfig+0x1c2>
 80040fa:	e00b      	b.n	8004114 <UART_SetConfig+0x1c8>
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e0cb      	b.n	800429a <UART_SetConfig+0x34e>
 8004102:	2302      	movs	r3, #2
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e0c8      	b.n	800429a <UART_SetConfig+0x34e>
 8004108:	2304      	movs	r3, #4
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e0c5      	b.n	800429a <UART_SetConfig+0x34e>
 800410e:	2308      	movs	r3, #8
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e0c2      	b.n	800429a <UART_SetConfig+0x34e>
 8004114:	2310      	movs	r3, #16
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	bf00      	nop
 800411a:	e0be      	b.n	800429a <UART_SetConfig+0x34e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <UART_SetConfig+0x30c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d124      	bne.n	8004170 <UART_SetConfig+0x224>
 8004126:	4b48      	ldr	r3, [pc, #288]	; (8004248 <UART_SetConfig+0x2fc>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d012      	beq.n	800415c <UART_SetConfig+0x210>
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d802      	bhi.n	8004142 <UART_SetConfig+0x1f6>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <UART_SetConfig+0x204>
 8004140:	e012      	b.n	8004168 <UART_SetConfig+0x21c>
 8004142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004146:	d006      	beq.n	8004156 <UART_SetConfig+0x20a>
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d009      	beq.n	8004162 <UART_SetConfig+0x216>
 800414e:	e00b      	b.n	8004168 <UART_SetConfig+0x21c>
 8004150:	2300      	movs	r3, #0
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e0a1      	b.n	800429a <UART_SetConfig+0x34e>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e09e      	b.n	800429a <UART_SetConfig+0x34e>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e09b      	b.n	800429a <UART_SetConfig+0x34e>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e098      	b.n	800429a <UART_SetConfig+0x34e>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	bf00      	nop
 800416e:	e094      	b.n	800429a <UART_SetConfig+0x34e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a39      	ldr	r2, [pc, #228]	; (800425c <UART_SetConfig+0x310>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d124      	bne.n	80041c4 <UART_SetConfig+0x278>
 800417a:	4b33      	ldr	r3, [pc, #204]	; (8004248 <UART_SetConfig+0x2fc>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004188:	d012      	beq.n	80041b0 <UART_SetConfig+0x264>
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d802      	bhi.n	8004196 <UART_SetConfig+0x24a>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <UART_SetConfig+0x258>
 8004194:	e012      	b.n	80041bc <UART_SetConfig+0x270>
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419a:	d006      	beq.n	80041aa <UART_SetConfig+0x25e>
 800419c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a0:	d009      	beq.n	80041b6 <UART_SetConfig+0x26a>
 80041a2:	e00b      	b.n	80041bc <UART_SetConfig+0x270>
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e077      	b.n	800429a <UART_SetConfig+0x34e>
 80041aa:	2302      	movs	r3, #2
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e074      	b.n	800429a <UART_SetConfig+0x34e>
 80041b0:	2304      	movs	r3, #4
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e071      	b.n	800429a <UART_SetConfig+0x34e>
 80041b6:	2308      	movs	r3, #8
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e06e      	b.n	800429a <UART_SetConfig+0x34e>
 80041bc:	2310      	movs	r3, #16
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	bf00      	nop
 80041c2:	e06a      	b.n	800429a <UART_SetConfig+0x34e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <UART_SetConfig+0x314>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d124      	bne.n	8004218 <UART_SetConfig+0x2cc>
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <UART_SetConfig+0x2fc>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d012      	beq.n	8004204 <UART_SetConfig+0x2b8>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d802      	bhi.n	80041ea <UART_SetConfig+0x29e>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <UART_SetConfig+0x2ac>
 80041e8:	e012      	b.n	8004210 <UART_SetConfig+0x2c4>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	d006      	beq.n	80041fe <UART_SetConfig+0x2b2>
 80041f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f4:	d009      	beq.n	800420a <UART_SetConfig+0x2be>
 80041f6:	e00b      	b.n	8004210 <UART_SetConfig+0x2c4>
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e04d      	b.n	800429a <UART_SetConfig+0x34e>
 80041fe:	2302      	movs	r3, #2
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e04a      	b.n	800429a <UART_SetConfig+0x34e>
 8004204:	2304      	movs	r3, #4
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e047      	b.n	800429a <UART_SetConfig+0x34e>
 800420a:	2308      	movs	r3, #8
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e044      	b.n	800429a <UART_SetConfig+0x34e>
 8004210:	2310      	movs	r3, #16
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	bf00      	nop
 8004216:	e040      	b.n	800429a <UART_SetConfig+0x34e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <UART_SetConfig+0x318>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d139      	bne.n	8004296 <UART_SetConfig+0x34a>
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <UART_SetConfig+0x2fc>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800422c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004230:	d027      	beq.n	8004282 <UART_SetConfig+0x336>
 8004232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004236:	d817      	bhi.n	8004268 <UART_SetConfig+0x31c>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <UART_SetConfig+0x32a>
 800423c:	e027      	b.n	800428e <UART_SetConfig+0x342>
 800423e:	bf00      	nop
 8004240:	efff69f3 	.word	0xefff69f3
 8004244:	40011000 	.word	0x40011000
 8004248:	40023800 	.word	0x40023800
 800424c:	40004400 	.word	0x40004400
 8004250:	40004800 	.word	0x40004800
 8004254:	40004c00 	.word	0x40004c00
 8004258:	40005000 	.word	0x40005000
 800425c:	40011400 	.word	0x40011400
 8004260:	40007800 	.word	0x40007800
 8004264:	40007c00 	.word	0x40007c00
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d006      	beq.n	800427c <UART_SetConfig+0x330>
 800426e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004272:	d009      	beq.n	8004288 <UART_SetConfig+0x33c>
 8004274:	e00b      	b.n	800428e <UART_SetConfig+0x342>
 8004276:	2300      	movs	r3, #0
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e00e      	b.n	800429a <UART_SetConfig+0x34e>
 800427c:	2302      	movs	r3, #2
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e00b      	b.n	800429a <UART_SetConfig+0x34e>
 8004282:	2304      	movs	r3, #4
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e008      	b.n	800429a <UART_SetConfig+0x34e>
 8004288:	2308      	movs	r3, #8
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e005      	b.n	800429a <UART_SetConfig+0x34e>
 800428e:	2310      	movs	r3, #16
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	bf00      	nop
 8004294:	e001      	b.n	800429a <UART_SetConfig+0x34e>
 8004296:	2310      	movs	r3, #16
 8004298:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d17f      	bne.n	80043a4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80042a4:	7ffb      	ldrb	r3, [r7, #31]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d85c      	bhi.n	8004364 <UART_SetConfig+0x418>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0x364>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	08004315 	.word	0x08004315
 80042bc:	08004365 	.word	0x08004365
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	08004365 	.word	0x08004365
 80042c8:	08004365 	.word	0x08004365
 80042cc:	08004365 	.word	0x08004365
 80042d0:	0800434d 	.word	0x0800434d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7ff f944 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 80042d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	005a      	lsls	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	61bb      	str	r3, [r7, #24]
        break;
 80042f2:	e03a      	b.n	800436a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7ff f948 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 80042f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	005a      	lsls	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	441a      	add	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	61bb      	str	r3, [r7, #24]
        break;
 8004312:	e02a      	b.n	800436a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	085a      	lsrs	r2, r3, #1
 800431a:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <UART_SetConfig+0x54c>)
 800431c:	4413      	add	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6852      	ldr	r2, [r2, #4]
 8004322:	fbb3 f3f2 	udiv	r3, r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	61bb      	str	r3, [r7, #24]
        break;
 800432a:	e01e      	b.n	800436a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432c:	f7ff f834 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004330:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	005a      	lsls	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	b29b      	uxth	r3, r3
 8004348:	61bb      	str	r3, [r7, #24]
        break;
 800434a:	e00e      	b.n	800436a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	61bb      	str	r3, [r7, #24]
        break;
 8004362:	e002      	b.n	800436a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
        break;
 8004368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b0f      	cmp	r3, #15
 800436e:	d916      	bls.n	800439e <UART_SetConfig+0x452>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d212      	bcs.n	800439e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f023 030f 	bic.w	r3, r3, #15
 8004380:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	b29a      	uxth	r2, r3
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	4313      	orrs	r3, r2
 8004392:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	897a      	ldrh	r2, [r7, #10]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e070      	b.n	8004480 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
 80043a2:	e06d      	b.n	8004480 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d859      	bhi.n	800445e <UART_SetConfig+0x512>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x464>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	08004411 	.word	0x08004411
 80043bc:	0800445f 	.word	0x0800445f
 80043c0:	08004429 	.word	0x08004429
 80043c4:	0800445f 	.word	0x0800445f
 80043c8:	0800445f 	.word	0x0800445f
 80043cc:	0800445f 	.word	0x0800445f
 80043d0:	08004447 	.word	0x08004447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7ff f8c4 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 80043d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	085a      	lsrs	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	61bb      	str	r3, [r7, #24]
        break;
 80043f0:	e038      	b.n	8004464 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f2:	f7ff f8c9 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 80043f6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	085a      	lsrs	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	61bb      	str	r3, [r7, #24]
        break;
 800440e:	e029      	b.n	8004464 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	085a      	lsrs	r2, r3, #1
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <UART_SetConfig+0x550>)
 8004418:	4413      	add	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6852      	ldr	r2, [r2, #4]
 800441e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	61bb      	str	r3, [r7, #24]
        break;
 8004426:	e01d      	b.n	8004464 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004428:	f7fe ffb6 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800442c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085a      	lsrs	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	b29b      	uxth	r3, r3
 8004442:	61bb      	str	r3, [r7, #24]
        break;
 8004444:	e00e      	b.n	8004464 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	b29b      	uxth	r3, r3
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e002      	b.n	8004464 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
        break;
 8004462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d908      	bls.n	800447c <UART_SetConfig+0x530>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d204      	bcs.n	800447c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	e001      	b.n	8004480 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	01e84800 	.word	0x01e84800
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045f2:	f7fc fdb3 	bl	800115c <HAL_GetTick>
 80045f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b08      	cmp	r3, #8
 8004604:	d10e      	bne.n	8004624 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f814 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e00a      	b.n	800463a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	e05d      	b.n	8004710 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d059      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fc fd7e 	bl	800115c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <UART_WaitOnFlagUntilTimeout+0x30>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11b      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004680:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e042      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02b      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c6:	d123      	bne.n	8004710 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e00f      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d092      	beq.n	8004654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004738:	b084      	sub	sp, #16
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	f107 001c 	add.w	r0, r7, #28
 8004746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d120      	bne.n	8004792 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <USB_CoreInit+0xac>)
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa52 	bl	8004c30 <USB_CoreReset>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	e010      	b.n	80047b4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa46 	bl	8004c30 <USB_CoreReset>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10b      	bne.n	80047d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 0206 	orr.w	r2, r3, #6
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047de:	b004      	add	sp, #16
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	ffbdffbf 	.word	0xffbdffbf

080047e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 0201 	bic.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e00b      	b.n	800484e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e001      	b.n	800484e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e003      	b.n	8004856 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800484e:	2032      	movs	r0, #50	; 0x32
 8004850:	f7fc fc90 	bl	8001174 <HAL_Delay>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004860:	b084      	sub	sp, #16
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800486e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e009      	b.n	8004894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3340      	adds	r3, #64	; 0x40
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b0e      	cmp	r3, #14
 8004898:	d9f2      	bls.n	8004880 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11c      	bne.n	80048da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e005      	b.n	80048e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	4619      	mov	r1, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	461a      	mov	r2, r3
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f959 	bl	8004bcc <USB_SetDevSpeed>
 800491a:	e018      	b.n	800494e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800491c:	2101      	movs	r1, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f954 	bl	8004bcc <USB_SetDevSpeed>
 8004924:	e013      	b.n	800494e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b03      	cmp	r3, #3
 800492a:	d10c      	bne.n	8004946 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004932:	2100      	movs	r1, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f949 	bl	8004bcc <USB_SetDevSpeed>
 800493a:	e008      	b.n	800494e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800493c:	2101      	movs	r1, #1
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f944 	bl	8004bcc <USB_SetDevSpeed>
 8004944:	e003      	b.n	800494e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004946:	2103      	movs	r1, #3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f93f 	bl	8004bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800494e:	2110      	movs	r1, #16
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8f3 	bl	8004b3c <USB_FlushTxFifo>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f911 	bl	8004b88 <USB_FlushRxFifo>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e043      	b.n	8004a22 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b0:	d118      	bne.n	80049e4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	461a      	mov	r2, r3
 80049c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e013      	b.n	80049f6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e008      	b.n	80049f6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	461a      	mov	r2, r3
 8004a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3b7      	bcc.n	800499a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e043      	b.n	8004ab8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a46:	d118      	bne.n	8004a7a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e013      	b.n	8004a8c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e008      	b.n	8004a8c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3b7      	bcc.n	8004a30 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <USB_DevInit+0x2d4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f043 0208 	orr.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <USB_DevInit+0x2d8>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b30:	b004      	add	sp, #16
 8004b32:	4770      	bx	lr
 8004b34:	803c3800 	.word	0x803c3800
 8004b38:	40000004 	.word	0x40000004

08004b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <USB_FlushTxFifo+0x48>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e006      	b.n	8004b76 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d0f0      	beq.n	8004b56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	00030d40 	.word	0x00030d40

08004b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2210      	movs	r2, #16
 8004b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <USB_FlushRxFifo+0x40>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e006      	b.n	8004bba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d0f0      	beq.n	8004b9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	00030d40 	.word	0x00030d40

08004bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c1e:	2003      	movs	r0, #3
 8004c20:	f7fc faa8 	bl	8001174 <HAL_Delay>

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <USB_CoreReset+0x64>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e01b      	b.n	8004c86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	daf2      	bge.n	8004c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <USB_CoreReset+0x64>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d0f0      	beq.n	8004c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	00030d40 	.word	0x00030d40

08004c98 <__errno>:
 8004c98:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <__errno+0x8>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000014 	.word	0x20000014

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4e0d      	ldr	r6, [pc, #52]	; (8004cdc <__libc_init_array+0x38>)
 8004ca8:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004caa:	1ba4      	subs	r4, r4, r6
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	2500      	movs	r5, #0
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	4e0b      	ldr	r6, [pc, #44]	; (8004ce4 <__libc_init_array+0x40>)
 8004cb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ce8 <__libc_init_array+0x44>)
 8004cb8:	f000 fc3a 	bl	8005530 <_init>
 8004cbc:	1ba4      	subs	r4, r4, r6
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	2500      	movs	r5, #0
 8004cc2:	42a5      	cmp	r5, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ccc:	4798      	blx	r3
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd6:	4798      	blx	r3
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	08005638 	.word	0x08005638
 8004ce0:	08005638 	.word	0x08005638
 8004ce4:	08005638 	.word	0x08005638
 8004ce8:	0800563c 	.word	0x0800563c

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <siprintf>:
 8004cfc:	b40e      	push	{r1, r2, r3}
 8004cfe:	b500      	push	{lr}
 8004d00:	b09c      	sub	sp, #112	; 0x70
 8004d02:	ab1d      	add	r3, sp, #116	; 0x74
 8004d04:	9002      	str	r0, [sp, #8]
 8004d06:	9006      	str	r0, [sp, #24]
 8004d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d0c:	4809      	ldr	r0, [pc, #36]	; (8004d34 <siprintf+0x38>)
 8004d0e:	9107      	str	r1, [sp, #28]
 8004d10:	9104      	str	r1, [sp, #16]
 8004d12:	4909      	ldr	r1, [pc, #36]	; (8004d38 <siprintf+0x3c>)
 8004d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	a902      	add	r1, sp, #8
 8004d20:	f000 f87a 	bl	8004e18 <_svfiprintf_r>
 8004d24:	9b02      	ldr	r3, [sp, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	b01c      	add	sp, #112	; 0x70
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d30:	b003      	add	sp, #12
 8004d32:	4770      	bx	lr
 8004d34:	20000014 	.word	0x20000014
 8004d38:	ffff0208 	.word	0xffff0208

08004d3c <strncat>:
 8004d3c:	b530      	push	{r4, r5, lr}
 8004d3e:	4603      	mov	r3, r0
 8004d40:	781c      	ldrb	r4, [r3, #0]
 8004d42:	1c5d      	adds	r5, r3, #1
 8004d44:	b944      	cbnz	r4, 8004d58 <strncat+0x1c>
 8004d46:	f112 32ff 	adds.w	r2, r2, #4294967295
 8004d4a:	d304      	bcc.n	8004d56 <strncat+0x1a>
 8004d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d50:	f803 4b01 	strb.w	r4, [r3], #1
 8004d54:	b914      	cbnz	r4, 8004d5c <strncat+0x20>
 8004d56:	bd30      	pop	{r4, r5, pc}
 8004d58:	462b      	mov	r3, r5
 8004d5a:	e7f1      	b.n	8004d40 <strncat+0x4>
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	d1f2      	bne.n	8004d46 <strncat+0xa>
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e7f0      	b.n	8004d46 <strncat+0xa>

08004d64 <__ssputs_r>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	688e      	ldr	r6, [r1, #8]
 8004d6a:	429e      	cmp	r6, r3
 8004d6c:	4682      	mov	sl, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4690      	mov	r8, r2
 8004d72:	4699      	mov	r9, r3
 8004d74:	d837      	bhi.n	8004de6 <__ssputs_r+0x82>
 8004d76:	898a      	ldrh	r2, [r1, #12]
 8004d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d7c:	d031      	beq.n	8004de2 <__ssputs_r+0x7e>
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	6909      	ldr	r1, [r1, #16]
 8004d82:	1a6f      	subs	r7, r5, r1
 8004d84:	6965      	ldr	r5, [r4, #20]
 8004d86:	2302      	movs	r3, #2
 8004d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d90:	f109 0301 	add.w	r3, r9, #1
 8004d94:	443b      	add	r3, r7
 8004d96:	429d      	cmp	r5, r3
 8004d98:	bf38      	it	cc
 8004d9a:	461d      	movcc	r5, r3
 8004d9c:	0553      	lsls	r3, r2, #21
 8004d9e:	d530      	bpl.n	8004e02 <__ssputs_r+0x9e>
 8004da0:	4629      	mov	r1, r5
 8004da2:	f000 fb2b 	bl	80053fc <_malloc_r>
 8004da6:	4606      	mov	r6, r0
 8004da8:	b950      	cbnz	r0, 8004dc0 <__ssputs_r+0x5c>
 8004daa:	230c      	movs	r3, #12
 8004dac:	f8ca 3000 	str.w	r3, [sl]
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc0:	463a      	mov	r2, r7
 8004dc2:	6921      	ldr	r1, [r4, #16]
 8004dc4:	f000 faa8 	bl	8005318 <memcpy>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	6126      	str	r6, [r4, #16]
 8004dd6:	6165      	str	r5, [r4, #20]
 8004dd8:	443e      	add	r6, r7
 8004dda:	1bed      	subs	r5, r5, r7
 8004ddc:	6026      	str	r6, [r4, #0]
 8004dde:	60a5      	str	r5, [r4, #8]
 8004de0:	464e      	mov	r6, r9
 8004de2:	454e      	cmp	r6, r9
 8004de4:	d900      	bls.n	8004de8 <__ssputs_r+0x84>
 8004de6:	464e      	mov	r6, r9
 8004de8:	4632      	mov	r2, r6
 8004dea:	4641      	mov	r1, r8
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f000 fa9e 	bl	800532e <memmove>
 8004df2:	68a3      	ldr	r3, [r4, #8]
 8004df4:	1b9b      	subs	r3, r3, r6
 8004df6:	60a3      	str	r3, [r4, #8]
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	441e      	add	r6, r3
 8004dfc:	6026      	str	r6, [r4, #0]
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e7dc      	b.n	8004dbc <__ssputs_r+0x58>
 8004e02:	462a      	mov	r2, r5
 8004e04:	f000 fb54 	bl	80054b0 <_realloc_r>
 8004e08:	4606      	mov	r6, r0
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d1e2      	bne.n	8004dd4 <__ssputs_r+0x70>
 8004e0e:	6921      	ldr	r1, [r4, #16]
 8004e10:	4650      	mov	r0, sl
 8004e12:	f000 faa5 	bl	8005360 <_free_r>
 8004e16:	e7c8      	b.n	8004daa <__ssputs_r+0x46>

08004e18 <_svfiprintf_r>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	461d      	mov	r5, r3
 8004e1e:	898b      	ldrh	r3, [r1, #12]
 8004e20:	061f      	lsls	r7, r3, #24
 8004e22:	b09d      	sub	sp, #116	; 0x74
 8004e24:	4680      	mov	r8, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4616      	mov	r6, r2
 8004e2a:	d50f      	bpl.n	8004e4c <_svfiprintf_r+0x34>
 8004e2c:	690b      	ldr	r3, [r1, #16]
 8004e2e:	b96b      	cbnz	r3, 8004e4c <_svfiprintf_r+0x34>
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	f000 fae3 	bl	80053fc <_malloc_r>
 8004e36:	6020      	str	r0, [r4, #0]
 8004e38:	6120      	str	r0, [r4, #16]
 8004e3a:	b928      	cbnz	r0, 8004e48 <_svfiprintf_r+0x30>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	f8c8 3000 	str.w	r3, [r8]
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	e0c8      	b.n	8004fda <_svfiprintf_r+0x1c2>
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	6163      	str	r3, [r4, #20]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	2320      	movs	r3, #32
 8004e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e56:	2330      	movs	r3, #48	; 0x30
 8004e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e5c:	9503      	str	r5, [sp, #12]
 8004e5e:	f04f 0b01 	mov.w	fp, #1
 8004e62:	4637      	mov	r7, r6
 8004e64:	463d      	mov	r5, r7
 8004e66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e6a:	b10b      	cbz	r3, 8004e70 <_svfiprintf_r+0x58>
 8004e6c:	2b25      	cmp	r3, #37	; 0x25
 8004e6e:	d13e      	bne.n	8004eee <_svfiprintf_r+0xd6>
 8004e70:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e74:	d00b      	beq.n	8004e8e <_svfiprintf_r+0x76>
 8004e76:	4653      	mov	r3, sl
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	f7ff ff71 	bl	8004d64 <__ssputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	f000 80a4 	beq.w	8004fd0 <_svfiprintf_r+0x1b8>
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	4453      	add	r3, sl
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	783b      	ldrb	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 809d 	beq.w	8004fd0 <_svfiprintf_r+0x1b8>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	9307      	str	r3, [sp, #28]
 8004ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eaa:	462f      	mov	r7, r5
 8004eac:	2205      	movs	r2, #5
 8004eae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004eb2:	4850      	ldr	r0, [pc, #320]	; (8004ff4 <_svfiprintf_r+0x1dc>)
 8004eb4:	f7fb f9b4 	bl	8000220 <memchr>
 8004eb8:	9b04      	ldr	r3, [sp, #16]
 8004eba:	b9d0      	cbnz	r0, 8004ef2 <_svfiprintf_r+0xda>
 8004ebc:	06d9      	lsls	r1, r3, #27
 8004ebe:	bf44      	itt	mi
 8004ec0:	2220      	movmi	r2, #32
 8004ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ec6:	071a      	lsls	r2, r3, #28
 8004ec8:	bf44      	itt	mi
 8004eca:	222b      	movmi	r2, #43	; 0x2b
 8004ecc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed0:	782a      	ldrb	r2, [r5, #0]
 8004ed2:	2a2a      	cmp	r2, #42	; 0x2a
 8004ed4:	d015      	beq.n	8004f02 <_svfiprintf_r+0xea>
 8004ed6:	9a07      	ldr	r2, [sp, #28]
 8004ed8:	462f      	mov	r7, r5
 8004eda:	2000      	movs	r0, #0
 8004edc:	250a      	movs	r5, #10
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee4:	3b30      	subs	r3, #48	; 0x30
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	d94d      	bls.n	8004f86 <_svfiprintf_r+0x16e>
 8004eea:	b1b8      	cbz	r0, 8004f1c <_svfiprintf_r+0x104>
 8004eec:	e00f      	b.n	8004f0e <_svfiprintf_r+0xf6>
 8004eee:	462f      	mov	r7, r5
 8004ef0:	e7b8      	b.n	8004e64 <_svfiprintf_r+0x4c>
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <_svfiprintf_r+0x1dc>)
 8004ef4:	1a80      	subs	r0, r0, r2
 8004ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8004efa:	4318      	orrs	r0, r3
 8004efc:	9004      	str	r0, [sp, #16]
 8004efe:	463d      	mov	r5, r7
 8004f00:	e7d3      	b.n	8004eaa <_svfiprintf_r+0x92>
 8004f02:	9a03      	ldr	r2, [sp, #12]
 8004f04:	1d11      	adds	r1, r2, #4
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	9103      	str	r1, [sp, #12]
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	db01      	blt.n	8004f12 <_svfiprintf_r+0xfa>
 8004f0e:	9207      	str	r2, [sp, #28]
 8004f10:	e004      	b.n	8004f1c <_svfiprintf_r+0x104>
 8004f12:	4252      	negs	r2, r2
 8004f14:	f043 0302 	orr.w	r3, r3, #2
 8004f18:	9207      	str	r2, [sp, #28]
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	783b      	ldrb	r3, [r7, #0]
 8004f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f20:	d10c      	bne.n	8004f3c <_svfiprintf_r+0x124>
 8004f22:	787b      	ldrb	r3, [r7, #1]
 8004f24:	2b2a      	cmp	r3, #42	; 0x2a
 8004f26:	d133      	bne.n	8004f90 <_svfiprintf_r+0x178>
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	9203      	str	r2, [sp, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfb8      	it	lt
 8004f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f38:	3702      	adds	r7, #2
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	4d2e      	ldr	r5, [pc, #184]	; (8004ff8 <_svfiprintf_r+0x1e0>)
 8004f3e:	7839      	ldrb	r1, [r7, #0]
 8004f40:	2203      	movs	r2, #3
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb f96c 	bl	8000220 <memchr>
 8004f48:	b138      	cbz	r0, 8004f5a <_svfiprintf_r+0x142>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	1b40      	subs	r0, r0, r5
 8004f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	4303      	orrs	r3, r0
 8004f56:	3701      	adds	r7, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	7839      	ldrb	r1, [r7, #0]
 8004f5c:	4827      	ldr	r0, [pc, #156]	; (8004ffc <_svfiprintf_r+0x1e4>)
 8004f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f62:	2206      	movs	r2, #6
 8004f64:	1c7e      	adds	r6, r7, #1
 8004f66:	f7fb f95b 	bl	8000220 <memchr>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d038      	beq.n	8004fe0 <_svfiprintf_r+0x1c8>
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <_svfiprintf_r+0x1e8>)
 8004f70:	bb13      	cbnz	r3, 8004fb8 <_svfiprintf_r+0x1a0>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	444b      	add	r3, r9
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	e76d      	b.n	8004e62 <_svfiprintf_r+0x4a>
 8004f86:	fb05 3202 	mla	r2, r5, r2, r3
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	460f      	mov	r7, r1
 8004f8e:	e7a6      	b.n	8004ede <_svfiprintf_r+0xc6>
 8004f90:	2300      	movs	r3, #0
 8004f92:	3701      	adds	r7, #1
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	4619      	mov	r1, r3
 8004f98:	250a      	movs	r5, #10
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa0:	3a30      	subs	r2, #48	; 0x30
 8004fa2:	2a09      	cmp	r2, #9
 8004fa4:	d903      	bls.n	8004fae <_svfiprintf_r+0x196>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c8      	beq.n	8004f3c <_svfiprintf_r+0x124>
 8004faa:	9105      	str	r1, [sp, #20]
 8004fac:	e7c6      	b.n	8004f3c <_svfiprintf_r+0x124>
 8004fae:	fb05 2101 	mla	r1, r5, r1, r2
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	e7f0      	b.n	8004f9a <_svfiprintf_r+0x182>
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <_svfiprintf_r+0x1ec>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fcc:	4681      	mov	r9, r0
 8004fce:	d1d6      	bne.n	8004f7e <_svfiprintf_r+0x166>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	065b      	lsls	r3, r3, #25
 8004fd4:	f53f af35 	bmi.w	8004e42 <_svfiprintf_r+0x2a>
 8004fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fda:	b01d      	add	sp, #116	; 0x74
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <_svfiprintf_r+0x1ec>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4640      	mov	r0, r8
 8004fec:	f000 f882 	bl	80050f4 <_printf_i>
 8004ff0:	e7ea      	b.n	8004fc8 <_svfiprintf_r+0x1b0>
 8004ff2:	bf00      	nop
 8004ff4:	080055fc 	.word	0x080055fc
 8004ff8:	08005602 	.word	0x08005602
 8004ffc:	08005606 	.word	0x08005606
 8005000:	00000000 	.word	0x00000000
 8005004:	08004d65 	.word	0x08004d65

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4691      	mov	r9, r2
 800500e:	461f      	mov	r7, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	f8c9 3000 	str.w	r3, [r9]
 8005022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005026:	4606      	mov	r6, r0
 8005028:	460c      	mov	r4, r1
 800502a:	b112      	cbz	r2, 8005032 <_printf_common+0x2a>
 800502c:	3301      	adds	r3, #1
 800502e:	f8c9 3000 	str.w	r3, [r9]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	f8d9 3000 	ldrmi.w	r3, [r9]
 800503c:	3302      	addmi	r3, #2
 800503e:	f8c9 3000 	strmi.w	r3, [r9]
 8005042:	6825      	ldr	r5, [r4, #0]
 8005044:	f015 0506 	ands.w	r5, r5, #6
 8005048:	d107      	bne.n	800505a <_printf_common+0x52>
 800504a:	f104 0a19 	add.w	sl, r4, #25
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	f8d9 2000 	ldr.w	r2, [r9]
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	42ab      	cmp	r3, r5
 8005058:	dc28      	bgt.n	80050ac <_printf_common+0xa4>
 800505a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	3300      	adds	r3, #0
 8005062:	bf18      	it	ne
 8005064:	2301      	movne	r3, #1
 8005066:	0692      	lsls	r2, r2, #26
 8005068:	d42d      	bmi.n	80050c6 <_printf_common+0xbe>
 800506a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800506e:	4639      	mov	r1, r7
 8005070:	4630      	mov	r0, r6
 8005072:	47c0      	blx	r8
 8005074:	3001      	adds	r0, #1
 8005076:	d020      	beq.n	80050ba <_printf_common+0xb2>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	68e5      	ldr	r5, [r4, #12]
 800507c:	f8d9 2000 	ldr.w	r2, [r9]
 8005080:	f003 0306 	and.w	r3, r3, #6
 8005084:	2b04      	cmp	r3, #4
 8005086:	bf08      	it	eq
 8005088:	1aad      	subeq	r5, r5, r2
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	bf0c      	ite	eq
 8005090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005094:	2500      	movne	r5, #0
 8005096:	4293      	cmp	r3, r2
 8005098:	bfc4      	itt	gt
 800509a:	1a9b      	subgt	r3, r3, r2
 800509c:	18ed      	addgt	r5, r5, r3
 800509e:	f04f 0900 	mov.w	r9, #0
 80050a2:	341a      	adds	r4, #26
 80050a4:	454d      	cmp	r5, r9
 80050a6:	d11a      	bne.n	80050de <_printf_common+0xd6>
 80050a8:	2000      	movs	r0, #0
 80050aa:	e008      	b.n	80050be <_printf_common+0xb6>
 80050ac:	2301      	movs	r3, #1
 80050ae:	4652      	mov	r2, sl
 80050b0:	4639      	mov	r1, r7
 80050b2:	4630      	mov	r0, r6
 80050b4:	47c0      	blx	r8
 80050b6:	3001      	adds	r0, #1
 80050b8:	d103      	bne.n	80050c2 <_printf_common+0xba>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	3501      	adds	r5, #1
 80050c4:	e7c3      	b.n	800504e <_printf_common+0x46>
 80050c6:	18e1      	adds	r1, r4, r3
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	2030      	movs	r0, #48	; 0x30
 80050cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d0:	4422      	add	r2, r4
 80050d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050da:	3302      	adds	r3, #2
 80050dc:	e7c5      	b.n	800506a <_printf_common+0x62>
 80050de:	2301      	movs	r3, #1
 80050e0:	4622      	mov	r2, r4
 80050e2:	4639      	mov	r1, r7
 80050e4:	4630      	mov	r0, r6
 80050e6:	47c0      	blx	r8
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0e6      	beq.n	80050ba <_printf_common+0xb2>
 80050ec:	f109 0901 	add.w	r9, r9, #1
 80050f0:	e7d8      	b.n	80050a4 <_printf_common+0x9c>
	...

080050f4 <_printf_i>:
 80050f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80050fc:	460c      	mov	r4, r1
 80050fe:	7e09      	ldrb	r1, [r1, #24]
 8005100:	b085      	sub	sp, #20
 8005102:	296e      	cmp	r1, #110	; 0x6e
 8005104:	4617      	mov	r7, r2
 8005106:	4606      	mov	r6, r0
 8005108:	4698      	mov	r8, r3
 800510a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800510c:	f000 80b3 	beq.w	8005276 <_printf_i+0x182>
 8005110:	d822      	bhi.n	8005158 <_printf_i+0x64>
 8005112:	2963      	cmp	r1, #99	; 0x63
 8005114:	d036      	beq.n	8005184 <_printf_i+0x90>
 8005116:	d80a      	bhi.n	800512e <_printf_i+0x3a>
 8005118:	2900      	cmp	r1, #0
 800511a:	f000 80b9 	beq.w	8005290 <_printf_i+0x19c>
 800511e:	2958      	cmp	r1, #88	; 0x58
 8005120:	f000 8083 	beq.w	800522a <_printf_i+0x136>
 8005124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005128:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800512c:	e032      	b.n	8005194 <_printf_i+0xa0>
 800512e:	2964      	cmp	r1, #100	; 0x64
 8005130:	d001      	beq.n	8005136 <_printf_i+0x42>
 8005132:	2969      	cmp	r1, #105	; 0x69
 8005134:	d1f6      	bne.n	8005124 <_printf_i+0x30>
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	0605      	lsls	r5, r0, #24
 800513c:	f103 0104 	add.w	r1, r3, #4
 8005140:	d52a      	bpl.n	8005198 <_printf_i+0xa4>
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6011      	str	r1, [r2, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da03      	bge.n	8005152 <_printf_i+0x5e>
 800514a:	222d      	movs	r2, #45	; 0x2d
 800514c:	425b      	negs	r3, r3
 800514e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005152:	486f      	ldr	r0, [pc, #444]	; (8005310 <_printf_i+0x21c>)
 8005154:	220a      	movs	r2, #10
 8005156:	e039      	b.n	80051cc <_printf_i+0xd8>
 8005158:	2973      	cmp	r1, #115	; 0x73
 800515a:	f000 809d 	beq.w	8005298 <_printf_i+0x1a4>
 800515e:	d808      	bhi.n	8005172 <_printf_i+0x7e>
 8005160:	296f      	cmp	r1, #111	; 0x6f
 8005162:	d020      	beq.n	80051a6 <_printf_i+0xb2>
 8005164:	2970      	cmp	r1, #112	; 0x70
 8005166:	d1dd      	bne.n	8005124 <_printf_i+0x30>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	f043 0320 	orr.w	r3, r3, #32
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	e003      	b.n	800517a <_printf_i+0x86>
 8005172:	2975      	cmp	r1, #117	; 0x75
 8005174:	d017      	beq.n	80051a6 <_printf_i+0xb2>
 8005176:	2978      	cmp	r1, #120	; 0x78
 8005178:	d1d4      	bne.n	8005124 <_printf_i+0x30>
 800517a:	2378      	movs	r3, #120	; 0x78
 800517c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005180:	4864      	ldr	r0, [pc, #400]	; (8005314 <_printf_i+0x220>)
 8005182:	e055      	b.n	8005230 <_printf_i+0x13c>
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	1d19      	adds	r1, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6011      	str	r1, [r2, #0]
 800518c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005194:	2301      	movs	r3, #1
 8005196:	e08c      	b.n	80052b2 <_printf_i+0x1be>
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051a0:	bf18      	it	ne
 80051a2:	b21b      	sxthne	r3, r3
 80051a4:	e7cf      	b.n	8005146 <_printf_i+0x52>
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	6825      	ldr	r5, [r4, #0]
 80051aa:	1d18      	adds	r0, r3, #4
 80051ac:	6010      	str	r0, [r2, #0]
 80051ae:	0628      	lsls	r0, r5, #24
 80051b0:	d501      	bpl.n	80051b6 <_printf_i+0xc2>
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	e002      	b.n	80051bc <_printf_i+0xc8>
 80051b6:	0668      	lsls	r0, r5, #25
 80051b8:	d5fb      	bpl.n	80051b2 <_printf_i+0xbe>
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	4854      	ldr	r0, [pc, #336]	; (8005310 <_printf_i+0x21c>)
 80051be:	296f      	cmp	r1, #111	; 0x6f
 80051c0:	bf14      	ite	ne
 80051c2:	220a      	movne	r2, #10
 80051c4:	2208      	moveq	r2, #8
 80051c6:	2100      	movs	r1, #0
 80051c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051cc:	6865      	ldr	r5, [r4, #4]
 80051ce:	60a5      	str	r5, [r4, #8]
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	f2c0 8095 	blt.w	8005300 <_printf_i+0x20c>
 80051d6:	6821      	ldr	r1, [r4, #0]
 80051d8:	f021 0104 	bic.w	r1, r1, #4
 80051dc:	6021      	str	r1, [r4, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13d      	bne.n	800525e <_printf_i+0x16a>
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	f040 808e 	bne.w	8005304 <_printf_i+0x210>
 80051e8:	4665      	mov	r5, ip
 80051ea:	2a08      	cmp	r2, #8
 80051ec:	d10b      	bne.n	8005206 <_printf_i+0x112>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d508      	bpl.n	8005206 <_printf_i+0x112>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	bfde      	ittt	le
 80051fc:	2330      	movle	r3, #48	; 0x30
 80051fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005202:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005206:	ebac 0305 	sub.w	r3, ip, r5
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	f8cd 8000 	str.w	r8, [sp]
 8005210:	463b      	mov	r3, r7
 8005212:	aa03      	add	r2, sp, #12
 8005214:	4621      	mov	r1, r4
 8005216:	4630      	mov	r0, r6
 8005218:	f7ff fef6 	bl	8005008 <_printf_common>
 800521c:	3001      	adds	r0, #1
 800521e:	d14d      	bne.n	80052bc <_printf_i+0x1c8>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	b005      	add	sp, #20
 8005226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800522a:	4839      	ldr	r0, [pc, #228]	; (8005310 <_printf_i+0x21c>)
 800522c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005230:	6813      	ldr	r3, [r2, #0]
 8005232:	6821      	ldr	r1, [r4, #0]
 8005234:	1d1d      	adds	r5, r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6015      	str	r5, [r2, #0]
 800523a:	060a      	lsls	r2, r1, #24
 800523c:	d50b      	bpl.n	8005256 <_printf_i+0x162>
 800523e:	07ca      	lsls	r2, r1, #31
 8005240:	bf44      	itt	mi
 8005242:	f041 0120 	orrmi.w	r1, r1, #32
 8005246:	6021      	strmi	r1, [r4, #0]
 8005248:	b91b      	cbnz	r3, 8005252 <_printf_i+0x15e>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	f022 0220 	bic.w	r2, r2, #32
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	2210      	movs	r2, #16
 8005254:	e7b7      	b.n	80051c6 <_printf_i+0xd2>
 8005256:	064d      	lsls	r5, r1, #25
 8005258:	bf48      	it	mi
 800525a:	b29b      	uxthmi	r3, r3
 800525c:	e7ef      	b.n	800523e <_printf_i+0x14a>
 800525e:	4665      	mov	r5, ip
 8005260:	fbb3 f1f2 	udiv	r1, r3, r2
 8005264:	fb02 3311 	mls	r3, r2, r1, r3
 8005268:	5cc3      	ldrb	r3, [r0, r3]
 800526a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800526e:	460b      	mov	r3, r1
 8005270:	2900      	cmp	r1, #0
 8005272:	d1f5      	bne.n	8005260 <_printf_i+0x16c>
 8005274:	e7b9      	b.n	80051ea <_printf_i+0xf6>
 8005276:	6813      	ldr	r3, [r2, #0]
 8005278:	6825      	ldr	r5, [r4, #0]
 800527a:	6961      	ldr	r1, [r4, #20]
 800527c:	1d18      	adds	r0, r3, #4
 800527e:	6010      	str	r0, [r2, #0]
 8005280:	0628      	lsls	r0, r5, #24
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	d501      	bpl.n	800528a <_printf_i+0x196>
 8005286:	6019      	str	r1, [r3, #0]
 8005288:	e002      	b.n	8005290 <_printf_i+0x19c>
 800528a:	066a      	lsls	r2, r5, #25
 800528c:	d5fb      	bpl.n	8005286 <_printf_i+0x192>
 800528e:	8019      	strh	r1, [r3, #0]
 8005290:	2300      	movs	r3, #0
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	4665      	mov	r5, ip
 8005296:	e7b9      	b.n	800520c <_printf_i+0x118>
 8005298:	6813      	ldr	r3, [r2, #0]
 800529a:	1d19      	adds	r1, r3, #4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	681d      	ldr	r5, [r3, #0]
 80052a0:	6862      	ldr	r2, [r4, #4]
 80052a2:	2100      	movs	r1, #0
 80052a4:	4628      	mov	r0, r5
 80052a6:	f7fa ffbb 	bl	8000220 <memchr>
 80052aa:	b108      	cbz	r0, 80052b0 <_printf_i+0x1bc>
 80052ac:	1b40      	subs	r0, r0, r5
 80052ae:	6060      	str	r0, [r4, #4]
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	2300      	movs	r3, #0
 80052b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ba:	e7a7      	b.n	800520c <_printf_i+0x118>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	462a      	mov	r2, r5
 80052c0:	4639      	mov	r1, r7
 80052c2:	4630      	mov	r0, r6
 80052c4:	47c0      	blx	r8
 80052c6:	3001      	adds	r0, #1
 80052c8:	d0aa      	beq.n	8005220 <_printf_i+0x12c>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	079b      	lsls	r3, r3, #30
 80052ce:	d413      	bmi.n	80052f8 <_printf_i+0x204>
 80052d0:	68e0      	ldr	r0, [r4, #12]
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	4298      	cmp	r0, r3
 80052d6:	bfb8      	it	lt
 80052d8:	4618      	movlt	r0, r3
 80052da:	e7a3      	b.n	8005224 <_printf_i+0x130>
 80052dc:	2301      	movs	r3, #1
 80052de:	464a      	mov	r2, r9
 80052e0:	4639      	mov	r1, r7
 80052e2:	4630      	mov	r0, r6
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d09a      	beq.n	8005220 <_printf_i+0x12c>
 80052ea:	3501      	adds	r5, #1
 80052ec:	68e3      	ldr	r3, [r4, #12]
 80052ee:	9a03      	ldr	r2, [sp, #12]
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	42ab      	cmp	r3, r5
 80052f4:	dcf2      	bgt.n	80052dc <_printf_i+0x1e8>
 80052f6:	e7eb      	b.n	80052d0 <_printf_i+0x1dc>
 80052f8:	2500      	movs	r5, #0
 80052fa:	f104 0919 	add.w	r9, r4, #25
 80052fe:	e7f5      	b.n	80052ec <_printf_i+0x1f8>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ac      	bne.n	800525e <_printf_i+0x16a>
 8005304:	7803      	ldrb	r3, [r0, #0]
 8005306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800530a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800530e:	e76c      	b.n	80051ea <_printf_i+0xf6>
 8005310:	0800560d 	.word	0x0800560d
 8005314:	0800561e 	.word	0x0800561e

08005318 <memcpy>:
 8005318:	b510      	push	{r4, lr}
 800531a:	1e43      	subs	r3, r0, #1
 800531c:	440a      	add	r2, r1
 800531e:	4291      	cmp	r1, r2
 8005320:	d100      	bne.n	8005324 <memcpy+0xc>
 8005322:	bd10      	pop	{r4, pc}
 8005324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800532c:	e7f7      	b.n	800531e <memcpy+0x6>

0800532e <memmove>:
 800532e:	4288      	cmp	r0, r1
 8005330:	b510      	push	{r4, lr}
 8005332:	eb01 0302 	add.w	r3, r1, r2
 8005336:	d807      	bhi.n	8005348 <memmove+0x1a>
 8005338:	1e42      	subs	r2, r0, #1
 800533a:	4299      	cmp	r1, r3
 800533c:	d00a      	beq.n	8005354 <memmove+0x26>
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005346:	e7f8      	b.n	800533a <memmove+0xc>
 8005348:	4283      	cmp	r3, r0
 800534a:	d9f5      	bls.n	8005338 <memmove+0xa>
 800534c:	1881      	adds	r1, r0, r2
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	42d3      	cmn	r3, r2
 8005352:	d100      	bne.n	8005356 <memmove+0x28>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800535a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800535e:	e7f7      	b.n	8005350 <memmove+0x22>

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d045      	beq.n	80053f4 <_free_r+0x94>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f000 f8d2 	bl	800551c <__malloc_lock>
 8005378:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <_free_r+0x98>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	4610      	mov	r0, r2
 800537e:	b933      	cbnz	r3, 800538e <_free_r+0x2e>
 8005380:	6063      	str	r3, [r4, #4]
 8005382:	6014      	str	r4, [r2, #0]
 8005384:	4628      	mov	r0, r5
 8005386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800538a:	f000 b8c8 	b.w	800551e <__malloc_unlock>
 800538e:	42a3      	cmp	r3, r4
 8005390:	d90c      	bls.n	80053ac <_free_r+0x4c>
 8005392:	6821      	ldr	r1, [r4, #0]
 8005394:	1862      	adds	r2, r4, r1
 8005396:	4293      	cmp	r3, r2
 8005398:	bf04      	itt	eq
 800539a:	681a      	ldreq	r2, [r3, #0]
 800539c:	685b      	ldreq	r3, [r3, #4]
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	bf04      	itt	eq
 80053a2:	1852      	addeq	r2, r2, r1
 80053a4:	6022      	streq	r2, [r4, #0]
 80053a6:	6004      	str	r4, [r0, #0]
 80053a8:	e7ec      	b.n	8005384 <_free_r+0x24>
 80053aa:	4613      	mov	r3, r2
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	b10a      	cbz	r2, 80053b4 <_free_r+0x54>
 80053b0:	42a2      	cmp	r2, r4
 80053b2:	d9fa      	bls.n	80053aa <_free_r+0x4a>
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	1858      	adds	r0, r3, r1
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d10b      	bne.n	80053d4 <_free_r+0x74>
 80053bc:	6820      	ldr	r0, [r4, #0]
 80053be:	4401      	add	r1, r0
 80053c0:	1858      	adds	r0, r3, r1
 80053c2:	4282      	cmp	r2, r0
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	d1dd      	bne.n	8005384 <_free_r+0x24>
 80053c8:	6810      	ldr	r0, [r2, #0]
 80053ca:	6852      	ldr	r2, [r2, #4]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	4401      	add	r1, r0
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	e7d7      	b.n	8005384 <_free_r+0x24>
 80053d4:	d902      	bls.n	80053dc <_free_r+0x7c>
 80053d6:	230c      	movs	r3, #12
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	e7d3      	b.n	8005384 <_free_r+0x24>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	1821      	adds	r1, r4, r0
 80053e0:	428a      	cmp	r2, r1
 80053e2:	bf04      	itt	eq
 80053e4:	6811      	ldreq	r1, [r2, #0]
 80053e6:	6852      	ldreq	r2, [r2, #4]
 80053e8:	6062      	str	r2, [r4, #4]
 80053ea:	bf04      	itt	eq
 80053ec:	1809      	addeq	r1, r1, r0
 80053ee:	6021      	streq	r1, [r4, #0]
 80053f0:	605c      	str	r4, [r3, #4]
 80053f2:	e7c7      	b.n	8005384 <_free_r+0x24>
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	bf00      	nop
 80053f8:	200000b8 	.word	0x200000b8

080053fc <_malloc_r>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	1ccd      	adds	r5, r1, #3
 8005400:	f025 0503 	bic.w	r5, r5, #3
 8005404:	3508      	adds	r5, #8
 8005406:	2d0c      	cmp	r5, #12
 8005408:	bf38      	it	cc
 800540a:	250c      	movcc	r5, #12
 800540c:	2d00      	cmp	r5, #0
 800540e:	4606      	mov	r6, r0
 8005410:	db01      	blt.n	8005416 <_malloc_r+0x1a>
 8005412:	42a9      	cmp	r1, r5
 8005414:	d903      	bls.n	800541e <_malloc_r+0x22>
 8005416:	230c      	movs	r3, #12
 8005418:	6033      	str	r3, [r6, #0]
 800541a:	2000      	movs	r0, #0
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	f000 f87d 	bl	800551c <__malloc_lock>
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <_malloc_r+0xac>)
 8005424:	6814      	ldr	r4, [r2, #0]
 8005426:	4621      	mov	r1, r4
 8005428:	b991      	cbnz	r1, 8005450 <_malloc_r+0x54>
 800542a:	4c20      	ldr	r4, [pc, #128]	; (80054ac <_malloc_r+0xb0>)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	b91b      	cbnz	r3, 8005438 <_malloc_r+0x3c>
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f863 	bl	80054fc <_sbrk_r>
 8005436:	6020      	str	r0, [r4, #0]
 8005438:	4629      	mov	r1, r5
 800543a:	4630      	mov	r0, r6
 800543c:	f000 f85e 	bl	80054fc <_sbrk_r>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d124      	bne.n	800548e <_malloc_r+0x92>
 8005444:	230c      	movs	r3, #12
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	4630      	mov	r0, r6
 800544a:	f000 f868 	bl	800551e <__malloc_unlock>
 800544e:	e7e4      	b.n	800541a <_malloc_r+0x1e>
 8005450:	680b      	ldr	r3, [r1, #0]
 8005452:	1b5b      	subs	r3, r3, r5
 8005454:	d418      	bmi.n	8005488 <_malloc_r+0x8c>
 8005456:	2b0b      	cmp	r3, #11
 8005458:	d90f      	bls.n	800547a <_malloc_r+0x7e>
 800545a:	600b      	str	r3, [r1, #0]
 800545c:	50cd      	str	r5, [r1, r3]
 800545e:	18cc      	adds	r4, r1, r3
 8005460:	4630      	mov	r0, r6
 8005462:	f000 f85c 	bl	800551e <__malloc_unlock>
 8005466:	f104 000b 	add.w	r0, r4, #11
 800546a:	1d23      	adds	r3, r4, #4
 800546c:	f020 0007 	bic.w	r0, r0, #7
 8005470:	1ac3      	subs	r3, r0, r3
 8005472:	d0d3      	beq.n	800541c <_malloc_r+0x20>
 8005474:	425a      	negs	r2, r3
 8005476:	50e2      	str	r2, [r4, r3]
 8005478:	e7d0      	b.n	800541c <_malloc_r+0x20>
 800547a:	428c      	cmp	r4, r1
 800547c:	684b      	ldr	r3, [r1, #4]
 800547e:	bf16      	itet	ne
 8005480:	6063      	strne	r3, [r4, #4]
 8005482:	6013      	streq	r3, [r2, #0]
 8005484:	460c      	movne	r4, r1
 8005486:	e7eb      	b.n	8005460 <_malloc_r+0x64>
 8005488:	460c      	mov	r4, r1
 800548a:	6849      	ldr	r1, [r1, #4]
 800548c:	e7cc      	b.n	8005428 <_malloc_r+0x2c>
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d005      	beq.n	80054a4 <_malloc_r+0xa8>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f82e 	bl	80054fc <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d0cf      	beq.n	8005444 <_malloc_r+0x48>
 80054a4:	6025      	str	r5, [r4, #0]
 80054a6:	e7db      	b.n	8005460 <_malloc_r+0x64>
 80054a8:	200000b8 	.word	0x200000b8
 80054ac:	200000bc 	.word	0x200000bc

080054b0 <_realloc_r>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	4607      	mov	r7, r0
 80054b4:	4614      	mov	r4, r2
 80054b6:	460e      	mov	r6, r1
 80054b8:	b921      	cbnz	r1, 80054c4 <_realloc_r+0x14>
 80054ba:	4611      	mov	r1, r2
 80054bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054c0:	f7ff bf9c 	b.w	80053fc <_malloc_r>
 80054c4:	b922      	cbnz	r2, 80054d0 <_realloc_r+0x20>
 80054c6:	f7ff ff4b 	bl	8005360 <_free_r>
 80054ca:	4625      	mov	r5, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d0:	f000 f826 	bl	8005520 <_malloc_usable_size_r>
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d20f      	bcs.n	80054f8 <_realloc_r+0x48>
 80054d8:	4621      	mov	r1, r4
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ff8e 	bl	80053fc <_malloc_r>
 80054e0:	4605      	mov	r5, r0
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d0f2      	beq.n	80054cc <_realloc_r+0x1c>
 80054e6:	4631      	mov	r1, r6
 80054e8:	4622      	mov	r2, r4
 80054ea:	f7ff ff15 	bl	8005318 <memcpy>
 80054ee:	4631      	mov	r1, r6
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ff35 	bl	8005360 <_free_r>
 80054f6:	e7e9      	b.n	80054cc <_realloc_r+0x1c>
 80054f8:	4635      	mov	r5, r6
 80054fa:	e7e7      	b.n	80054cc <_realloc_r+0x1c>

080054fc <_sbrk_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4c06      	ldr	r4, [pc, #24]	; (8005518 <_sbrk_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4605      	mov	r5, r0
 8005504:	4608      	mov	r0, r1
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	f7fb fd62 	bl	8000fd0 <_sbrk>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_sbrk_r+0x1a>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	b103      	cbz	r3, 8005516 <_sbrk_r+0x1a>
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000600 	.word	0x20000600

0800551c <__malloc_lock>:
 800551c:	4770      	bx	lr

0800551e <__malloc_unlock>:
 800551e:	4770      	bx	lr

08005520 <_malloc_usable_size_r>:
 8005520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005524:	1f18      	subs	r0, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	bfbc      	itt	lt
 800552a:	580b      	ldrlt	r3, [r1, r0]
 800552c:	18c0      	addlt	r0, r0, r3
 800552e:	4770      	bx	lr

08005530 <_init>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr

0800553c <_fini>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr
